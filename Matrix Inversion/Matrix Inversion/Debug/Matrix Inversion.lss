
Matrix Inversion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00802000  000011e0  00001274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00802024  00802024  00001298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004242  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033f8  00000000  00000000  0000559a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000823  00000000  00000000  00008992  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  000091b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002b1d  00000000  00000000  00009350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009fe  00000000  00000000  0000be6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000c86b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__ctors_end>
       4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
       8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
       c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      10:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      14:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      18:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      1c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      20:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      24:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      28:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      2c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      30:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      34:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      38:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__vector_14>
      3c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      40:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      44:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      48:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      4c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      50:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      54:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      58:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      5c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      60:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      64:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      68:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      6c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      70:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      74:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      78:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      7c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      80:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      84:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      88:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      8c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      90:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      94:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      98:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      9c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      a0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      a4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      a8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      ac:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      b0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      b4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      b8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      bc:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      c0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      c4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      c8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      cc:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      d0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      d4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      d8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      dc:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      e0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      e4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      e8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      ec:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      f0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      f4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      f8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
      fc:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     100:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     104:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     108:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     10c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     110:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     114:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     118:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     11c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     120:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     124:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     128:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     12c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     130:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     134:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     138:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     13c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     140:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     144:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     148:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     14c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     150:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     154:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     158:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     15c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     160:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     164:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     168:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     16c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     170:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     174:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     178:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     17c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     180:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     184:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     188:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     18c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     190:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     194:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     198:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     19c:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1a0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1a4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1a8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1ac:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1b0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1b4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1b8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1bc:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1c0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1c4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1c8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1cc:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1d0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1d4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1d8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1dc:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1e0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1e4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1e8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1ec:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1f0:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1f4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1f8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__bad_interrupt>
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	std	Y+40, r29	; 0x28
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	std	Y+56, r1	; 0x38
     20a:	ba ab       	std	Y+50, r27	; 0x32
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	std	Y+51, r10	; 0x33
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	std	Y+54, r27	; 0x36
     23e:	aa aa       	std	Y+50, r10	; 0x32
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	ldd	r30, Z+49	; 0x31
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <main+0x8c>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__ctors_end>:
     27e:	11 24       	eor	r1, r1
     280:	1f be       	out	0x3f, r1	; 63
     282:	cf ef       	ldi	r28, 0xFF	; 255
     284:	cd bf       	out	0x3d, r28	; 61
     286:	df e3       	ldi	r29, 0x3F	; 63
     288:	de bf       	out	0x3e, r29	; 62
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	0c bf       	out	0x3c, r16	; 60

0000028e <__do_copy_data>:
     28e:	10 e2       	ldi	r17, 0x20	; 32
     290:	a0 e0       	ldi	r26, 0x00	; 0
     292:	b0 e2       	ldi	r27, 0x20	; 32
     294:	e0 ee       	ldi	r30, 0xE0	; 224
     296:	f1 e1       	ldi	r31, 0x11	; 17
     298:	00 e0       	ldi	r16, 0x00	; 0
     29a:	0b bf       	out	0x3b, r16	; 59
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <__do_copy_data+0x14>
     29e:	07 90       	elpm	r0, Z+
     2a0:	0d 92       	st	X+, r0
     2a2:	a4 32       	cpi	r26, 0x24	; 36
     2a4:	b1 07       	cpc	r27, r17
     2a6:	d9 f7       	brne	.-10     	; 0x29e <__do_copy_data+0x10>

000002a8 <__do_clear_bss>:
     2a8:	20 e2       	ldi	r18, 0x20	; 32
     2aa:	a4 e2       	ldi	r26, 0x24	; 36
     2ac:	b0 e2       	ldi	r27, 0x20	; 32
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <.do_clear_bss_start>

000002b0 <.do_clear_bss_loop>:
     2b0:	1d 92       	st	X+, r1

000002b2 <.do_clear_bss_start>:
     2b2:	a5 32       	cpi	r26, 0x25	; 37
     2b4:	b2 07       	cpc	r27, r18
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <.do_clear_bss_loop>
     2b8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <main>
     2bc:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <_exit>

000002c0 <__bad_interrupt>:
     2c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002c4 <USARTXInit>:
#include<math.h>
volatile uint8_t overflow_count;

void USARTXInit(void)
{
	PORTC_DIRSET=PIN3_bm;                                           //Setting TX pin of USARTC0 as output (PC3)
     2c4:	88 e0       	ldi	r24, 0x08	; 8
     2c6:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	PORTC_DIRCLR=PIN2_bm;                                           //Setting RX pin of USARTC0 as input (PC2)
     2ca:	84 e0       	ldi	r24, 0x04	; 4
     2cc:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
	USARTC0_BAUDCTRLA=0x0C;                                         //BSEL should be 12 in decimal for selection of baud rate 9600 with given freq
     2d0:	8c e0       	ldi	r24, 0x0C	; 12
     2d2:	80 93 a6 08 	sts	0x08A6, r24	; 0x8008a6 <__TEXT_REGION_LENGTH__+0x7008a6>
	USARTC0_BAUDCTRLB=0;                                            //BSCALE = 0
     2d6:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7008a7>
	USARTC0_CTRLC=(USART_CHSIZE_8BIT_gc)|(USART_PMODE_DISABLED_gc); //8 bit transmission in one data frame, no parity and one stop bit
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7008a5>
	USARTC0_CTRLB=(USART_RXEN_bm)|(USART_TXEN_bm);                  //Enabling the transmitter and receiver channels of USARTC0
     2e0:	88 e1       	ldi	r24, 0x18	; 24
     2e2:	80 93 a4 08 	sts	0x08A4, r24	; 0x8008a4 <__TEXT_REGION_LENGTH__+0x7008a4>
     2e6:	08 95       	ret

000002e8 <USARTXTrans>:
}

void USARTXTrans(uint8_t dat)
{
	while(!(USARTC0_STATUS & USART_DREIF_bm));                      //While data register empty interrupt flag is not high, wait
     2e8:	e1 ea       	ldi	r30, 0xA1	; 161
     2ea:	f8 e0       	ldi	r31, 0x08	; 8
     2ec:	90 81       	ld	r25, Z
     2ee:	95 ff       	sbrs	r25, 5
     2f0:	fd cf       	rjmp	.-6      	; 0x2ec <USARTXTrans+0x4>
	USARTC0_DATA=dat;                                               //Writing the desired value into the transmit buffer register
     2f2:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
     2f6:	08 95       	ret

000002f8 <determinant>:

float determinant(float [][3], float);
void cofactor(float [][3], float);
void transpose(float [][3], float [][3], float);
float determinant(float a[3][3], float k)
{
     2f8:	2f 92       	push	r2
     2fa:	3f 92       	push	r3
     2fc:	4f 92       	push	r4
     2fe:	5f 92       	push	r5
     300:	6f 92       	push	r6
     302:	7f 92       	push	r7
     304:	8f 92       	push	r8
     306:	9f 92       	push	r9
     308:	af 92       	push	r10
     30a:	bf 92       	push	r11
     30c:	cf 92       	push	r12
     30e:	df 92       	push	r13
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	ee 97       	sbiw	r28, 0x3e	; 62
     322:	cd bf       	out	0x3d, r28	; 61
     324:	de bf       	out	0x3e, r29	; 62
     326:	8c 01       	movw	r16, r24
     328:	4f a3       	std	Y+39, r20	; 0x27
     32a:	58 a7       	std	Y+40, r21	; 0x28
     32c:	69 a7       	std	Y+41, r22	; 0x29
     32e:	7a a7       	std	Y+42, r23	; 0x2a
	float s = 1, det = 0, b[3][3];
	if (k == 1)
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e8       	ldi	r20, 0x80	; 128
     336:	5f e3       	ldi	r21, 0x3F	; 63
     338:	6f a1       	ldd	r22, Y+39	; 0x27
     33a:	78 a5       	ldd	r23, Y+40	; 0x28
     33c:	89 a5       	ldd	r24, Y+41	; 0x29
     33e:	9a a5       	ldd	r25, Y+42	; 0x2a
     340:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__cmpsf2>
     344:	88 23       	and	r24, r24
     346:	39 f1       	breq	.+78     	; 0x396 <determinant+0x9e>
		return (a[0][0]);
	}
	else
	{
		det = 0;
		for (int c = 0; c < k; c++)
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	a9 01       	movw	r20, r18
     34e:	6f a1       	ldd	r22, Y+39	; 0x27
     350:	78 a5       	ldd	r23, Y+40	; 0x28
     352:	89 a5       	ldd	r24, Y+41	; 0x29
     354:	9a a5       	ldd	r25, Y+42	; 0x2a
     356:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     35a:	18 16       	cp	r1, r24
     35c:	0c f0       	brlt	.+2      	; 0x360 <determinant+0x68>
     35e:	09 c1       	rjmp	.+530    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
     360:	0b af       	std	Y+59, r16	; 0x3b
     362:	1c af       	std	Y+60, r17	; 0x3c
     364:	09 af       	std	Y+57, r16	; 0x39
     366:	1a af       	std	Y+58, r17	; 0x3a
     368:	1f a6       	std	Y+47, r1	; 0x2f
     36a:	18 aa       	std	Y+48, r1	; 0x30
     36c:	1d aa       	std	Y+53, r1	; 0x35
     36e:	1e aa       	std	Y+54, r1	; 0x36
     370:	1f aa       	std	Y+55, r1	; 0x37
     372:	18 ae       	std	Y+56, r1	; 0x38
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	a0 e8       	ldi	r26, 0x80	; 128
     37a:	bf e3       	ldi	r27, 0x3F	; 63
     37c:	89 ab       	std	Y+49, r24	; 0x31
     37e:	9a ab       	std	Y+50, r25	; 0x32
     380:	ab ab       	std	Y+51, r26	; 0x33
     382:	bc ab       	std	Y+52, r27	; 0x34
				for (int j = 0 ;j < k; j++)
				{
					b[i][j] = 0;
					if (i != 0 && j != c)
					{
						b[m][n] = a[i][j];
     384:	de 01       	movw	r26, r28
     386:	11 96       	adiw	r26, 0x01	; 1
     388:	ad a3       	std	Y+37, r26	; 0x25
     38a:	be a3       	std	Y+38, r27	; 0x26
     38c:	bd a1       	ldd	r27, Y+37	; 0x25
     38e:	bd af       	std	Y+61, r27	; 0x3d
     390:	ee a1       	ldd	r30, Y+38	; 0x26
     392:	ee af       	std	Y+62, r30	; 0x3e
     394:	e2 c0       	rjmp	.+452    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
float determinant(float a[3][3], float k)
{
	float s = 1, det = 0, b[3][3];
	if (k == 1)
	{
		return (a[0][0]);
     396:	d8 01       	movw	r26, r16
     398:	3c 91       	ld	r19, X
     39a:	11 96       	adiw	r26, 0x01	; 1
     39c:	2c 91       	ld	r18, X
     39e:	11 97       	sbiw	r26, 0x01	; 1
     3a0:	12 96       	adiw	r26, 0x02	; 2
     3a2:	5c 91       	ld	r21, X
     3a4:	12 97       	sbiw	r26, 0x02	; 2
     3a6:	13 96       	adiw	r26, 0x03	; 3
     3a8:	4c 91       	ld	r20, X
     3aa:	ec c0       	rjmp	.+472    	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
			int n = 0;
			for (int i = 0;i < k; i++)
			{
				for (int j = 0 ;j < k; j++)
				{
					b[i][j] = 0;
     3ac:	f6 01       	movw	r30, r12
     3ae:	11 92       	st	Z+, r1
     3b0:	11 92       	st	Z+, r1
     3b2:	11 92       	st	Z+, r1
     3b4:	11 92       	st	Z+, r1
     3b6:	6f 01       	movw	r12, r30
					if (i != 0 && j != c)
     3b8:	a1 14       	cp	r10, r1
     3ba:	b1 04       	cpc	r11, r1
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <determinant+0xc8>
     3be:	49 c0       	rjmp	.+146    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     3c0:	2f a5       	ldd	r18, Y+47	; 0x2f
     3c2:	38 a9       	ldd	r19, Y+48	; 0x30
     3c4:	20 17       	cp	r18, r16
     3c6:	31 07       	cpc	r19, r17
     3c8:	09 f4       	brne	.+2      	; 0x3cc <determinant+0xd4>
     3ca:	43 c0       	rjmp	.+134    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
					{
						b[m][n] = a[i][j];
     3cc:	f1 01       	movw	r30, r2
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	e2 0d       	add	r30, r2
     3d4:	f3 1d       	adc	r31, r3
     3d6:	e8 0d       	add	r30, r8
     3d8:	f9 1d       	adc	r31, r9
     3da:	ee 0f       	add	r30, r30
     3dc:	ff 1f       	adc	r31, r31
     3de:	ee 0f       	add	r30, r30
     3e0:	ff 1f       	adc	r31, r31
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	30 e0       	ldi	r19, 0x00	; 0
     3e6:	2c 0f       	add	r18, r28
     3e8:	3d 1f       	adc	r19, r29
     3ea:	2e 0f       	add	r18, r30
     3ec:	3f 1f       	adc	r19, r31
     3ee:	f7 01       	movw	r30, r14
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	a2 81       	ldd	r26, Z+2	; 0x02
     3f6:	b3 81       	ldd	r27, Z+3	; 0x03
     3f8:	f9 01       	movw	r30, r18
     3fa:	80 83       	st	Z, r24
     3fc:	91 83       	std	Z+1, r25	; 0x01
     3fe:	a2 83       	std	Z+2, r26	; 0x02
     400:	b3 83       	std	Z+3, r27	; 0x03
						if (n < (k - 2))
     402:	b4 01       	movw	r22, r8
     404:	09 2c       	mov	r0, r9
     406:	00 0c       	add	r0, r0
     408:	88 0b       	sbc	r24, r24
     40a:	99 0b       	sbc	r25, r25
     40c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     410:	6b a7       	std	Y+43, r22	; 0x2b
     412:	7c a7       	std	Y+44, r23	; 0x2c
     414:	8d a7       	std	Y+45, r24	; 0x2d
     416:	9e a7       	std	Y+46, r25	; 0x2e
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e4       	ldi	r21, 0x40	; 64
     420:	6f a1       	ldd	r22, Y+39	; 0x27
     422:	78 a5       	ldd	r23, Y+40	; 0x28
     424:	89 a5       	ldd	r24, Y+41	; 0x29
     426:	9a a5       	ldd	r25, Y+42	; 0x2a
     428:	0e 94 61 05 	call	0xac2	; 0xac2 <__subsf3>
     42c:	9b 01       	movw	r18, r22
     42e:	ac 01       	movw	r20, r24
     430:	6b a5       	ldd	r22, Y+43	; 0x2b
     432:	7c a5       	ldd	r23, Y+44	; 0x2c
     434:	8d a5       	ldd	r24, Y+45	; 0x2d
     436:	9e a5       	ldd	r25, Y+46	; 0x2e
     438:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__cmpsf2>
     43c:	88 23       	and	r24, r24
     43e:	24 f4       	brge	.+8      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
						n++;
     440:	ff ef       	ldi	r31, 0xFF	; 255
     442:	8f 1a       	sub	r8, r31
     444:	9f 0a       	sbc	r9, r31
     446:	05 c0       	rjmp	.+10     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
						else
						{
							n = 0;
							m++;
     448:	2f ef       	ldi	r18, 0xFF	; 255
     44a:	22 1a       	sub	r2, r18
     44c:	32 0a       	sbc	r3, r18
						b[m][n] = a[i][j];
						if (n < (k - 2))
						n++;
						else
						{
							n = 0;
     44e:	81 2c       	mov	r8, r1
     450:	91 2c       	mov	r9, r1
		{
			int m = 0;
			int n = 0;
			for (int i = 0;i < k; i++)
			{
				for (int j = 0 ;j < k; j++)
     452:	0f 5f       	subi	r16, 0xFF	; 255
     454:	1f 4f       	sbci	r17, 0xFF	; 255
     456:	34 e0       	ldi	r19, 0x04	; 4
     458:	e3 0e       	add	r14, r19
     45a:	f1 1c       	adc	r15, r1
     45c:	b8 01       	movw	r22, r16
     45e:	01 2e       	mov	r0, r17
     460:	00 0c       	add	r0, r0
     462:	88 0b       	sbc	r24, r24
     464:	99 0b       	sbc	r25, r25
     466:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     46a:	9b 01       	movw	r18, r22
     46c:	ac 01       	movw	r20, r24
     46e:	6f a1       	ldd	r22, Y+39	; 0x27
     470:	78 a5       	ldd	r23, Y+40	; 0x28
     472:	89 a5       	ldd	r24, Y+41	; 0x29
     474:	9a a5       	ldd	r25, Y+42	; 0x2a
     476:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     47a:	18 16       	cp	r1, r24
     47c:	0c f4       	brge	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47e:	96 cf       	rjmp	.-212    	; 0x3ac <determinant+0xb4>
		det = 0;
		for (int c = 0; c < k; c++)
		{
			int m = 0;
			int n = 0;
			for (int i = 0;i < k; i++)
     480:	8f ef       	ldi	r24, 0xFF	; 255
     482:	a8 1a       	sub	r10, r24
     484:	b8 0a       	sbc	r11, r24
     486:	9c e0       	ldi	r25, 0x0C	; 12
     488:	69 0e       	add	r6, r25
     48a:	71 1c       	adc	r7, r1
     48c:	ac e0       	ldi	r26, 0x0C	; 12
     48e:	4a 0e       	add	r4, r26
     490:	51 1c       	adc	r5, r1
     492:	b5 01       	movw	r22, r10
     494:	0b 2c       	mov	r0, r11
     496:	00 0c       	add	r0, r0
     498:	88 0b       	sbc	r24, r24
     49a:	99 0b       	sbc	r25, r25
     49c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     4a0:	9b 01       	movw	r18, r22
     4a2:	ac 01       	movw	r20, r24
     4a4:	6f a1       	ldd	r22, Y+39	; 0x27
     4a6:	78 a5       	ldd	r23, Y+40	; 0x28
     4a8:	89 a5       	ldd	r24, Y+41	; 0x29
     4aa:	9a a5       	ldd	r25, Y+42	; 0x2a
     4ac:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     4b0:	18 16       	cp	r1, r24
     4b2:	2c f4       	brge	.+10     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>

float determinant(float [][3], float);
void cofactor(float [][3], float);
void transpose(float [][3], float [][3], float);
float determinant(float a[3][3], float k)
{
     4b4:	72 01       	movw	r14, r4
     4b6:	63 01       	movw	r12, r6
     4b8:	00 e0       	ldi	r16, 0x00	; 0
     4ba:	10 e0       	ldi	r17, 0x00	; 0
     4bc:	77 cf       	rjmp	.-274    	; 0x3ac <determinant+0xb4>
							m++;
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, k - 1));
     4be:	e9 ad       	ldd	r30, Y+57	; 0x39
     4c0:	fa ad       	ldd	r31, Y+58	; 0x3a
     4c2:	c1 90       	ld	r12, Z+
     4c4:	d1 90       	ld	r13, Z+
     4c6:	e1 90       	ld	r14, Z+
     4c8:	f1 90       	ld	r15, Z+
     4ca:	e9 af       	std	Y+57, r30	; 0x39
     4cc:	fa af       	std	Y+58, r31	; 0x3a
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	40 e8       	ldi	r20, 0x80	; 128
     4d4:	5f e3       	ldi	r21, 0x3F	; 63
     4d6:	6f a1       	ldd	r22, Y+39	; 0x27
     4d8:	78 a5       	ldd	r23, Y+40	; 0x28
     4da:	89 a5       	ldd	r24, Y+41	; 0x29
     4dc:	9a a5       	ldd	r25, Y+42	; 0x2a
     4de:	0e 94 61 05 	call	0xac2	; 0xac2 <__subsf3>
     4e2:	ab 01       	movw	r20, r22
     4e4:	bc 01       	movw	r22, r24
     4e6:	8d ad       	ldd	r24, Y+61	; 0x3d
     4e8:	9e ad       	ldd	r25, Y+62	; 0x3e
     4ea:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <determinant>
     4ee:	9b 01       	movw	r18, r22
     4f0:	ac 01       	movw	r20, r24
     4f2:	c7 01       	movw	r24, r14
     4f4:	b6 01       	movw	r22, r12
     4f6:	0e 94 8a 06 	call	0xd14	; 0xd14 <__mulsf3>
     4fa:	29 a9       	ldd	r18, Y+49	; 0x31
     4fc:	3a a9       	ldd	r19, Y+50	; 0x32
     4fe:	4b a9       	ldd	r20, Y+51	; 0x33
     500:	5c a9       	ldd	r21, Y+52	; 0x34
     502:	0e 94 8a 06 	call	0xd14	; 0xd14 <__mulsf3>
     506:	9b 01       	movw	r18, r22
     508:	ac 01       	movw	r20, r24
     50a:	6d a9       	ldd	r22, Y+53	; 0x35
     50c:	7e a9       	ldd	r23, Y+54	; 0x36
     50e:	8f a9       	ldd	r24, Y+55	; 0x37
     510:	98 ad       	ldd	r25, Y+56	; 0x38
     512:	0e 94 62 05 	call	0xac4	; 0xac4 <__addsf3>
     516:	6d ab       	std	Y+53, r22	; 0x35
     518:	7e ab       	std	Y+54, r23	; 0x36
     51a:	8f ab       	std	Y+55, r24	; 0x37
     51c:	98 af       	std	Y+56, r25	; 0x38
			s = -1 * s;
     51e:	89 a9       	ldd	r24, Y+49	; 0x31
     520:	9a a9       	ldd	r25, Y+50	; 0x32
     522:	ab a9       	ldd	r26, Y+51	; 0x33
     524:	bc a9       	ldd	r27, Y+52	; 0x34
     526:	b0 58       	subi	r27, 0x80	; 128
     528:	89 ab       	std	Y+49, r24	; 0x31
     52a:	9a ab       	std	Y+50, r25	; 0x32
     52c:	ab ab       	std	Y+51, r26	; 0x33
     52e:	bc ab       	std	Y+52, r27	; 0x34
		return (a[0][0]);
	}
	else
	{
		det = 0;
		for (int c = 0; c < k; c++)
     530:	af a5       	ldd	r26, Y+47	; 0x2f
     532:	b8 a9       	ldd	r27, Y+48	; 0x30
     534:	11 96       	adiw	r26, 0x01	; 1
     536:	af a7       	std	Y+47, r26	; 0x2f
     538:	b8 ab       	std	Y+48, r27	; 0x30
     53a:	bd 01       	movw	r22, r26
     53c:	bb 0f       	add	r27, r27
     53e:	88 0b       	sbc	r24, r24
     540:	99 0b       	sbc	r25, r25
     542:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     546:	9b 01       	movw	r18, r22
     548:	ac 01       	movw	r20, r24
     54a:	6f a1       	ldd	r22, Y+39	; 0x27
     54c:	78 a5       	ldd	r23, Y+40	; 0x28
     54e:	89 a5       	ldd	r24, Y+41	; 0x29
     550:	9a a5       	ldd	r25, Y+42	; 0x2a
     552:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     556:	18 16       	cp	r1, r24
     558:	8c f4       	brge	.+34     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     55a:	fe 01       	movw	r30, r28
     55c:	31 96       	adiw	r30, 0x01	; 1
     55e:	3f 01       	movw	r6, r30
						b[m][n] = a[i][j];
						if (n < (k - 2))
						n++;
						else
						{
							n = 0;
     560:	4b ac       	ldd	r4, Y+59	; 0x3b
     562:	5c ac       	ldd	r5, Y+60	; 0x3c
     564:	a1 2c       	mov	r10, r1
     566:	b1 2c       	mov	r11, r1
     568:	81 2c       	mov	r8, r1
     56a:	91 2c       	mov	r9, r1
     56c:	21 2c       	mov	r2, r1
     56e:	31 2c       	mov	r3, r1
     570:	a1 cf       	rjmp	.-190    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
		return (a[0][0]);
	}
	else
	{
		det = 0;
		for (int c = 0; c < k; c++)
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	50 e0       	ldi	r21, 0x00	; 0
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	04 c0       	rjmp	.+8      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
							m++;
						}
					}
				}
			}
			det = det + s * (a[0][c] * determinant(b, k - 1));
     57c:	3d a9       	ldd	r19, Y+53	; 0x35
     57e:	2e a9       	ldd	r18, Y+54	; 0x36
     580:	5f a9       	ldd	r21, Y+55	; 0x37
     582:	48 ad       	ldd	r20, Y+56	; 0x38
			s = -1 * s;
		}
	}

	return (det);
}
     584:	63 2f       	mov	r22, r19
     586:	72 2f       	mov	r23, r18
     588:	85 2f       	mov	r24, r21
     58a:	94 2f       	mov	r25, r20
     58c:	ee 96       	adiw	r28, 0x3e	; 62
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	de bf       	out	0x3e, r29	; 62
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
     5a2:	bf 90       	pop	r11
     5a4:	af 90       	pop	r10
     5a6:	9f 90       	pop	r9
     5a8:	8f 90       	pop	r8
     5aa:	7f 90       	pop	r7
     5ac:	6f 90       	pop	r6
     5ae:	5f 90       	pop	r5
     5b0:	4f 90       	pop	r4
     5b2:	3f 90       	pop	r3
     5b4:	2f 90       	pop	r2
     5b6:	08 95       	ret

000005b8 <transpose>:
	transpose(num, fac, f);
}

/*Finding transpose of matrix*/
void transpose(float num[3][3], float fac[3][3], float r)
{
     5b8:	af 92       	push	r10
     5ba:	bf 92       	push	r11
     5bc:	cf 92       	push	r12
     5be:	df 92       	push	r13
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	5c 01       	movw	r10, r24
     5ce:	69 01       	movw	r12, r18
     5d0:	7a 01       	movw	r14, r20
	float b[3][3], inverse[3][3], d;

	for (int i = 0;i < r; i++)
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	a9 01       	movw	r20, r18
     5d8:	c7 01       	movw	r24, r14
     5da:	b6 01       	movw	r22, r12
     5dc:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     5e0:	18 16       	cp	r1, r24
     5e2:	0c f1       	brlt	.+66     	; 0x626 <transpose+0x6e>
     5e4:	25 c0       	rjmp	.+74     	; 0x630 <transpose+0x78>
	{
		for (int j = 0;j < r; j++)
     5e6:	21 96       	adiw	r28, 0x01	; 1
     5e8:	be 01       	movw	r22, r28
     5ea:	0d 2e       	mov	r0, r29
     5ec:	00 0c       	add	r0, r0
     5ee:	88 0b       	sbc	r24, r24
     5f0:	99 0b       	sbc	r25, r25
     5f2:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     5f6:	9b 01       	movw	r18, r22
     5f8:	ac 01       	movw	r20, r24
     5fa:	c7 01       	movw	r24, r14
     5fc:	b6 01       	movw	r22, r12
     5fe:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     602:	18 16       	cp	r1, r24
     604:	84 f3       	brlt	.-32     	; 0x5e6 <transpose+0x2e>
/*Finding transpose of matrix*/
void transpose(float num[3][3], float fac[3][3], float r)
{
	float b[3][3], inverse[3][3], d;

	for (int i = 0;i < r; i++)
     606:	0f 5f       	subi	r16, 0xFF	; 255
     608:	1f 4f       	sbci	r17, 0xFF	; 255
     60a:	b8 01       	movw	r22, r16
     60c:	01 2e       	mov	r0, r17
     60e:	00 0c       	add	r0, r0
     610:	88 0b       	sbc	r24, r24
     612:	99 0b       	sbc	r25, r25
     614:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     618:	a7 01       	movw	r20, r14
     61a:	96 01       	movw	r18, r12
     61c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__cmpsf2>
     620:	88 23       	and	r24, r24
     622:	1c f0       	brlt	.+6      	; 0x62a <transpose+0x72>
     624:	3a c0       	rjmp	.+116    	; 0x69a <transpose+0xe2>
     626:	00 e0       	ldi	r16, 0x00	; 0
     628:	10 e0       	ldi	r17, 0x00	; 0
	transpose(num, fac, f);
}

/*Finding transpose of matrix*/
void transpose(float num[3][3], float fac[3][3], float r)
{
     62a:	c0 e0       	ldi	r28, 0x00	; 0
     62c:	d0 e0       	ldi	r29, 0x00	; 0
     62e:	db cf       	rjmp	.-74     	; 0x5e6 <transpose+0x2e>
		for (int j = 0;j < r; j++)
		{
			b[i][j] = fac[j][i];
		}
	}
	d = determinant(num, r);
     630:	b7 01       	movw	r22, r14
     632:	a6 01       	movw	r20, r12
     634:	c5 01       	movw	r24, r10
     636:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <determinant>
	for (int i = 0;i < r; i++)
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	a9 01       	movw	r20, r18
     640:	c7 01       	movw	r24, r14
     642:	b6 01       	movw	r22, r12
     644:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     648:	18 16       	cp	r1, r24
     64a:	7c f5       	brge	.+94     	; 0x6aa <transpose+0xf2>
     64c:	00 e0       	ldi	r16, 0x00	; 0
     64e:	10 e0       	ldi	r17, 0x00	; 0
     650:	21 c0       	rjmp	.+66     	; 0x694 <transpose+0xdc>
	{
		for (int j = 0;j < r; j++)
     652:	21 96       	adiw	r28, 0x01	; 1
     654:	be 01       	movw	r22, r28
     656:	0d 2e       	mov	r0, r29
     658:	00 0c       	add	r0, r0
     65a:	88 0b       	sbc	r24, r24
     65c:	99 0b       	sbc	r25, r25
     65e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     662:	9b 01       	movw	r18, r22
     664:	ac 01       	movw	r20, r24
     666:	c7 01       	movw	r24, r14
     668:	b6 01       	movw	r22, r12
     66a:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     66e:	18 16       	cp	r1, r24
     670:	84 f3       	brlt	.-32     	; 0x652 <transpose+0x9a>
		{
			b[i][j] = fac[j][i];
		}
	}
	d = determinant(num, r);
	for (int i = 0;i < r; i++)
     672:	0f 5f       	subi	r16, 0xFF	; 255
     674:	1f 4f       	sbci	r17, 0xFF	; 255
     676:	b8 01       	movw	r22, r16
     678:	01 2e       	mov	r0, r17
     67a:	00 0c       	add	r0, r0
     67c:	88 0b       	sbc	r24, r24
     67e:	99 0b       	sbc	r25, r25
     680:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     684:	9b 01       	movw	r18, r22
     686:	ac 01       	movw	r20, r24
     688:	c7 01       	movw	r24, r14
     68a:	b6 01       	movw	r22, r12
     68c:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     690:	18 16       	cp	r1, r24
     692:	5c f4       	brge	.+22     	; 0x6aa <transpose+0xf2>
     694:	c0 e0       	ldi	r28, 0x00	; 0
     696:	d0 e0       	ldi	r29, 0x00	; 0
     698:	dc cf       	rjmp	.-72     	; 0x652 <transpose+0x9a>
		for (int j = 0;j < r; j++)
		{
			b[i][j] = fac[j][i];
		}
	}
	d = determinant(num, r);
     69a:	b7 01       	movw	r22, r14
     69c:	a6 01       	movw	r20, r12
     69e:	c5 01       	movw	r24, r10
     6a0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <determinant>
     6a4:	00 e0       	ldi	r16, 0x00	; 0
     6a6:	10 e0       	ldi	r17, 0x00	; 0
     6a8:	f5 cf       	rjmp	.-22     	; 0x694 <transpose+0xdc>
		for (int j = 0;j < r; j++)
		{
			inverse[i][j] = b[i][j] / d;
		}
	}
}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	ef 90       	pop	r14
     6b6:	df 90       	pop	r13
     6b8:	cf 90       	pop	r12
     6ba:	bf 90       	pop	r11
     6bc:	af 90       	pop	r10
     6be:	08 95       	ret

000006c0 <cofactor>:

	return (det);
}

void cofactor(float num[3][3], float f)
{
     6c0:	2f 92       	push	r2
     6c2:	3f 92       	push	r3
     6c4:	4f 92       	push	r4
     6c6:	5f 92       	push	r5
     6c8:	6f 92       	push	r6
     6ca:	7f 92       	push	r7
     6cc:	8f 92       	push	r8
     6ce:	9f 92       	push	r9
     6d0:	af 92       	push	r10
     6d2:	bf 92       	push	r11
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	ca 55       	subi	r28, 0x5A	; 90
     6ea:	d1 09       	sbc	r29, r1
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	68 96       	adiw	r28, 0x18	; 24
     6f2:	8f af       	std	Y+63, r24	; 0x3f
     6f4:	68 97       	sbiw	r28, 0x18	; 24
     6f6:	69 96       	adiw	r28, 0x19	; 25
     6f8:	9f af       	std	Y+63, r25	; 0x3f
     6fa:	69 97       	sbiw	r28, 0x19	; 25
     6fc:	2d 96       	adiw	r28, 0x0d	; 13
     6fe:	4c af       	std	Y+60, r20	; 0x3c
     700:	5d af       	std	Y+61, r21	; 0x3d
     702:	6e af       	std	Y+62, r22	; 0x3e
     704:	7f af       	std	Y+63, r23	; 0x3f
     706:	2d 97       	sbiw	r28, 0x0d	; 13
	float b[3][3], fac[3][3];
	for (int q = 0;q < f; q++)
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	a9 01       	movw	r20, r18
     70e:	2d 96       	adiw	r28, 0x0d	; 13
     710:	6c ad       	ldd	r22, Y+60	; 0x3c
     712:	7d ad       	ldd	r23, Y+61	; 0x3d
     714:	8e ad       	ldd	r24, Y+62	; 0x3e
     716:	9f ad       	ldd	r25, Y+63	; 0x3f
     718:	2d 97       	sbiw	r28, 0x0d	; 13
     71a:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     71e:	18 16       	cp	r1, r24
     720:	0c f0       	brlt	.+2      	; 0x724 <cofactor+0x64>
     722:	2b c1       	rjmp	.+598    	; 0x97a <cofactor+0x2ba>
     724:	ce 01       	movw	r24, r28
     726:	85 96       	adiw	r24, 0x25	; 37
     728:	67 96       	adiw	r28, 0x17	; 23
     72a:	8e af       	std	Y+62, r24	; 0x3e
     72c:	9f af       	std	Y+63, r25	; 0x3f
     72e:	67 97       	sbiw	r28, 0x17	; 23
     730:	41 2c       	mov	r4, r1
     732:	51 2c       	mov	r5, r1
			{
				for (int j = 0;j < f; j++)
				{
					if (i != q && j != p)
					{
						b[m][n] = num[i][j];
     734:	fe 01       	movw	r30, r28
     736:	31 96       	adiw	r30, 0x01	; 1
     738:	3f 01       	movw	r6, r30
     73a:	6a 96       	adiw	r28, 0x1a	; 26
     73c:	ef af       	std	Y+63, r30	; 0x3f
     73e:	6a 97       	sbiw	r28, 0x1a	; 26
     740:	6b 96       	adiw	r28, 0x1b	; 27
     742:	7f ae       	std	Y+63, r7	; 0x3f
     744:	6b 97       	sbiw	r28, 0x1b	; 27
     746:	0e c1       	rjmp	.+540    	; 0x964 <cofactor+0x2a4>
			int n = 0;
			for (int i = 0;i < f; i++)
			{
				for (int j = 0;j < f; j++)
				{
					if (i != q && j != p)
     748:	48 14       	cp	r4, r8
     74a:	59 04       	cpc	r5, r9
     74c:	09 f4       	brne	.+2      	; 0x750 <cofactor+0x90>
     74e:	4a c0       	rjmp	.+148    	; 0x7e4 <cofactor+0x124>
     750:	20 16       	cp	r2, r16
     752:	31 06       	cpc	r3, r17
     754:	09 f4       	brne	.+2      	; 0x758 <cofactor+0x98>
     756:	46 c0       	rjmp	.+140    	; 0x7e4 <cofactor+0x124>
					{
						b[m][n] = num[i][j];
     758:	f5 01       	movw	r30, r10
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	ea 0d       	add	r30, r10
     760:	fb 1d       	adc	r31, r11
     762:	ec 0d       	add	r30, r12
     764:	fd 1d       	adc	r31, r13
     766:	ee 0f       	add	r30, r30
     768:	ff 1f       	adc	r31, r31
     76a:	ee 0f       	add	r30, r30
     76c:	ff 1f       	adc	r31, r31
     76e:	9f 01       	movw	r18, r30
     770:	26 0d       	add	r18, r6
     772:	37 1d       	adc	r19, r7
     774:	f7 01       	movw	r30, r14
     776:	80 81       	ld	r24, Z
     778:	91 81       	ldd	r25, Z+1	; 0x01
     77a:	a2 81       	ldd	r26, Z+2	; 0x02
     77c:	b3 81       	ldd	r27, Z+3	; 0x03
     77e:	f9 01       	movw	r30, r18
     780:	80 83       	st	Z, r24
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	a2 83       	std	Z+2, r26	; 0x02
     786:	b3 83       	std	Z+3, r27	; 0x03
						if (n < (f - 2))
     788:	b6 01       	movw	r22, r12
     78a:	0d 2c       	mov	r0, r13
     78c:	00 0c       	add	r0, r0
     78e:	88 0b       	sbc	r24, r24
     790:	99 0b       	sbc	r25, r25
     792:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     796:	61 96       	adiw	r28, 0x11	; 17
     798:	6c af       	std	Y+60, r22	; 0x3c
     79a:	7d af       	std	Y+61, r23	; 0x3d
     79c:	8e af       	std	Y+62, r24	; 0x3e
     79e:	9f af       	std	Y+63, r25	; 0x3f
     7a0:	61 97       	sbiw	r28, 0x11	; 17
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	50 e4       	ldi	r21, 0x40	; 64
     7aa:	2d 96       	adiw	r28, 0x0d	; 13
     7ac:	6c ad       	ldd	r22, Y+60	; 0x3c
     7ae:	7d ad       	ldd	r23, Y+61	; 0x3d
     7b0:	8e ad       	ldd	r24, Y+62	; 0x3e
     7b2:	9f ad       	ldd	r25, Y+63	; 0x3f
     7b4:	2d 97       	sbiw	r28, 0x0d	; 13
     7b6:	0e 94 61 05 	call	0xac2	; 0xac2 <__subsf3>
     7ba:	9b 01       	movw	r18, r22
     7bc:	ac 01       	movw	r20, r24
     7be:	61 96       	adiw	r28, 0x11	; 17
     7c0:	6c ad       	ldd	r22, Y+60	; 0x3c
     7c2:	7d ad       	ldd	r23, Y+61	; 0x3d
     7c4:	8e ad       	ldd	r24, Y+62	; 0x3e
     7c6:	9f ad       	ldd	r25, Y+63	; 0x3f
     7c8:	61 97       	sbiw	r28, 0x11	; 17
     7ca:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__cmpsf2>
     7ce:	88 23       	and	r24, r24
     7d0:	24 f4       	brge	.+8      	; 0x7da <cofactor+0x11a>
						n++;
     7d2:	ff ef       	ldi	r31, 0xFF	; 255
     7d4:	cf 1a       	sub	r12, r31
     7d6:	df 0a       	sbc	r13, r31
     7d8:	05 c0       	rjmp	.+10     	; 0x7e4 <cofactor+0x124>
						else
						{
							n = 0;
							m++;
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	a8 1a       	sub	r10, r24
     7de:	b8 0a       	sbc	r11, r24
						b[m][n] = num[i][j];
						if (n < (f - 2))
						n++;
						else
						{
							n = 0;
     7e0:	c1 2c       	mov	r12, r1
     7e2:	d1 2c       	mov	r13, r1
		{
			int m = 0;
			int n = 0;
			for (int i = 0;i < f; i++)
			{
				for (int j = 0;j < f; j++)
     7e4:	0f 5f       	subi	r16, 0xFF	; 255
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255
     7e8:	94 e0       	ldi	r25, 0x04	; 4
     7ea:	e9 0e       	add	r14, r25
     7ec:	f1 1c       	adc	r15, r1
     7ee:	b8 01       	movw	r22, r16
     7f0:	01 2e       	mov	r0, r17
     7f2:	00 0c       	add	r0, r0
     7f4:	88 0b       	sbc	r24, r24
     7f6:	99 0b       	sbc	r25, r25
     7f8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
     800:	2d 96       	adiw	r28, 0x0d	; 13
     802:	6c ad       	ldd	r22, Y+60	; 0x3c
     804:	7d ad       	ldd	r23, Y+61	; 0x3d
     806:	8e ad       	ldd	r24, Y+62	; 0x3e
     808:	9f ad       	ldd	r25, Y+63	; 0x3f
     80a:	2d 97       	sbiw	r28, 0x0d	; 13
     80c:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     810:	18 16       	cp	r1, r24
     812:	0c f4       	brge	.+2      	; 0x816 <cofactor+0x156>
     814:	99 cf       	rjmp	.-206    	; 0x748 <cofactor+0x88>
	{
		for (int p = 0;p < f; p++)
		{
			int m = 0;
			int n = 0;
			for (int i = 0;i < f; i++)
     816:	ef ef       	ldi	r30, 0xFF	; 255
     818:	8e 1a       	sub	r8, r30
     81a:	9e 0a       	sbc	r9, r30
     81c:	63 96       	adiw	r28, 0x13	; 19
     81e:	8e ad       	ldd	r24, Y+62	; 0x3e
     820:	9f ad       	ldd	r25, Y+63	; 0x3f
     822:	63 97       	sbiw	r28, 0x13	; 19
     824:	0c 96       	adiw	r24, 0x0c	; 12
     826:	63 96       	adiw	r28, 0x13	; 19
     828:	8e af       	std	Y+62, r24	; 0x3e
     82a:	9f af       	std	Y+63, r25	; 0x3f
     82c:	63 97       	sbiw	r28, 0x13	; 19
     82e:	b4 01       	movw	r22, r8
     830:	09 2c       	mov	r0, r9
     832:	00 0c       	add	r0, r0
     834:	88 0b       	sbc	r24, r24
     836:	99 0b       	sbc	r25, r25
     838:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     83c:	9b 01       	movw	r18, r22
     83e:	ac 01       	movw	r20, r24
     840:	2d 96       	adiw	r28, 0x0d	; 13
     842:	6c ad       	ldd	r22, Y+60	; 0x3c
     844:	7d ad       	ldd	r23, Y+61	; 0x3d
     846:	8e ad       	ldd	r24, Y+62	; 0x3e
     848:	9f ad       	ldd	r25, Y+63	; 0x3f
     84a:	2d 97       	sbiw	r28, 0x0d	; 13
     84c:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     850:	18 16       	cp	r1, r24
     852:	3c f4       	brge	.+14     	; 0x862 <cofactor+0x1a2>

	return (det);
}

void cofactor(float num[3][3], float f)
{
     854:	63 96       	adiw	r28, 0x13	; 19
     856:	ee ac       	ldd	r14, Y+62	; 0x3e
     858:	ff ac       	ldd	r15, Y+63	; 0x3f
     85a:	63 97       	sbiw	r28, 0x13	; 19
     85c:	00 e0       	ldi	r16, 0x00	; 0
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	73 cf       	rjmp	.-282    	; 0x748 <cofactor+0x88>
							m++;
						}
					}
				}
			}
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
     862:	b2 01       	movw	r22, r4
     864:	62 0d       	add	r22, r2
     866:	73 1d       	adc	r23, r3
     868:	07 2e       	mov	r0, r23
     86a:	00 0c       	add	r0, r0
     86c:	88 0b       	sbc	r24, r24
     86e:	99 0b       	sbc	r25, r25
     870:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     874:	9b 01       	movw	r18, r22
     876:	ac 01       	movw	r20, r24
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	80 e8       	ldi	r24, 0x80	; 128
     87e:	9f eb       	ldi	r25, 0xBF	; 191
     880:	0e 94 f7 06 	call	0xdee	; 0xdee <pow>
     884:	6b 01       	movw	r12, r22
     886:	7c 01       	movw	r14, r24
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e8       	ldi	r20, 0x80	; 128
     88e:	5f e3       	ldi	r21, 0x3F	; 63
     890:	2d 96       	adiw	r28, 0x0d	; 13
     892:	6c ad       	ldd	r22, Y+60	; 0x3c
     894:	7d ad       	ldd	r23, Y+61	; 0x3d
     896:	8e ad       	ldd	r24, Y+62	; 0x3e
     898:	9f ad       	ldd	r25, Y+63	; 0x3f
     89a:	2d 97       	sbiw	r28, 0x0d	; 13
     89c:	0e 94 61 05 	call	0xac2	; 0xac2 <__subsf3>
     8a0:	ab 01       	movw	r20, r22
     8a2:	bc 01       	movw	r22, r24
     8a4:	6a 96       	adiw	r28, 0x1a	; 26
     8a6:	8f ad       	ldd	r24, Y+63	; 0x3f
     8a8:	6a 97       	sbiw	r28, 0x1a	; 26
     8aa:	6b 96       	adiw	r28, 0x1b	; 27
     8ac:	9f ad       	ldd	r25, Y+63	; 0x3f
     8ae:	6b 97       	sbiw	r28, 0x1b	; 27
     8b0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <determinant>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 8a 06 	call	0xd14	; 0xd14 <__mulsf3>
     8c0:	65 96       	adiw	r28, 0x15	; 21
     8c2:	ee ad       	ldd	r30, Y+62	; 0x3e
     8c4:	ff ad       	ldd	r31, Y+63	; 0x3f
     8c6:	65 97       	sbiw	r28, 0x15	; 21
     8c8:	61 93       	st	Z+, r22
     8ca:	71 93       	st	Z+, r23
     8cc:	81 93       	st	Z+, r24
     8ce:	91 93       	st	Z+, r25
     8d0:	65 96       	adiw	r28, 0x15	; 21
     8d2:	ee af       	std	Y+62, r30	; 0x3e
     8d4:	ff af       	std	Y+63, r31	; 0x3f
     8d6:	65 97       	sbiw	r28, 0x15	; 21
void cofactor(float num[3][3], float f)
{
	float b[3][3], fac[3][3];
	for (int q = 0;q < f; q++)
	{
		for (int p = 0;p < f; p++)
     8d8:	ff ef       	ldi	r31, 0xFF	; 255
     8da:	2f 1a       	sub	r2, r31
     8dc:	3f 0a       	sbc	r3, r31
     8de:	b1 01       	movw	r22, r2
     8e0:	03 2c       	mov	r0, r3
     8e2:	00 0c       	add	r0, r0
     8e4:	88 0b       	sbc	r24, r24
     8e6:	99 0b       	sbc	r25, r25
     8e8:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	2d 96       	adiw	r28, 0x0d	; 13
     8f2:	6c ad       	ldd	r22, Y+60	; 0x3c
     8f4:	7d ad       	ldd	r23, Y+61	; 0x3d
     8f6:	8e ad       	ldd	r24, Y+62	; 0x3e
     8f8:	9f ad       	ldd	r25, Y+63	; 0x3f
     8fa:	2d 97       	sbiw	r28, 0x0d	; 13
     8fc:	0e 94 85 06 	call	0xd0a	; 0xd0a <__gesf2>
     900:	18 16       	cp	r1, r24
     902:	9c f4       	brge	.+38     	; 0x92a <cofactor+0x26a>
     904:	68 96       	adiw	r28, 0x18	; 24
     906:	8f ad       	ldd	r24, Y+63	; 0x3f
     908:	68 97       	sbiw	r28, 0x18	; 24
     90a:	62 96       	adiw	r28, 0x12	; 18
     90c:	8f af       	std	Y+63, r24	; 0x3f
     90e:	62 97       	sbiw	r28, 0x12	; 18
     910:	69 96       	adiw	r28, 0x19	; 25
     912:	9f ad       	ldd	r25, Y+63	; 0x3f
     914:	69 97       	sbiw	r28, 0x19	; 25
     916:	63 96       	adiw	r28, 0x13	; 19
     918:	9f af       	std	Y+63, r25	; 0x3f
     91a:	63 97       	sbiw	r28, 0x13	; 19
						b[m][n] = num[i][j];
						if (n < (f - 2))
						n++;
						else
						{
							n = 0;
     91c:	81 2c       	mov	r8, r1
     91e:	91 2c       	mov	r9, r1
     920:	c1 2c       	mov	r12, r1
     922:	d1 2c       	mov	r13, r1
     924:	a1 2c       	mov	r10, r1
     926:	b1 2c       	mov	r11, r1
     928:	95 cf       	rjmp	.-214    	; 0x854 <cofactor+0x194>
}

void cofactor(float num[3][3], float f)
{
	float b[3][3], fac[3][3];
	for (int q = 0;q < f; q++)
     92a:	ef ef       	ldi	r30, 0xFF	; 255
     92c:	4e 1a       	sub	r4, r30
     92e:	5e 0a       	sbc	r5, r30
     930:	67 96       	adiw	r28, 0x17	; 23
     932:	8e ad       	ldd	r24, Y+62	; 0x3e
     934:	9f ad       	ldd	r25, Y+63	; 0x3f
     936:	67 97       	sbiw	r28, 0x17	; 23
     938:	0c 96       	adiw	r24, 0x0c	; 12
     93a:	67 96       	adiw	r28, 0x17	; 23
     93c:	8e af       	std	Y+62, r24	; 0x3e
     93e:	9f af       	std	Y+63, r25	; 0x3f
     940:	67 97       	sbiw	r28, 0x17	; 23
     942:	b2 01       	movw	r22, r4
     944:	05 2c       	mov	r0, r5
     946:	00 0c       	add	r0, r0
     948:	88 0b       	sbc	r24, r24
     94a:	99 0b       	sbc	r25, r25
     94c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
     950:	2d 96       	adiw	r28, 0x0d	; 13
     952:	2c ad       	ldd	r18, Y+60	; 0x3c
     954:	3d ad       	ldd	r19, Y+61	; 0x3d
     956:	4e ad       	ldd	r20, Y+62	; 0x3e
     958:	5f ad       	ldd	r21, Y+63	; 0x3f
     95a:	2d 97       	sbiw	r28, 0x0d	; 13
     95c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <__cmpsf2>
     960:	88 23       	and	r24, r24
     962:	5c f4       	brge	.+22     	; 0x97a <cofactor+0x2ba>
						b[m][n] = num[i][j];
						if (n < (f - 2))
						n++;
						else
						{
							n = 0;
     964:	67 96       	adiw	r28, 0x17	; 23
     966:	ee ad       	ldd	r30, Y+62	; 0x3e
     968:	ff ad       	ldd	r31, Y+63	; 0x3f
     96a:	67 97       	sbiw	r28, 0x17	; 23
     96c:	65 96       	adiw	r28, 0x15	; 21
     96e:	ee af       	std	Y+62, r30	; 0x3e
     970:	ff af       	std	Y+63, r31	; 0x3f
     972:	65 97       	sbiw	r28, 0x15	; 21
     974:	21 2c       	mov	r2, r1
     976:	31 2c       	mov	r3, r1
     978:	c5 cf       	rjmp	.-118    	; 0x904 <cofactor+0x244>
				}
			}
			fac[q][p] = pow(-1, q + p) * determinant(b, f - 1);
		}
	}
	transpose(num, fac, f);
     97a:	2d 96       	adiw	r28, 0x0d	; 13
     97c:	2c ad       	ldd	r18, Y+60	; 0x3c
     97e:	3d ad       	ldd	r19, Y+61	; 0x3d
     980:	4e ad       	ldd	r20, Y+62	; 0x3e
     982:	5f ad       	ldd	r21, Y+63	; 0x3f
     984:	2d 97       	sbiw	r28, 0x0d	; 13
     986:	be 01       	movw	r22, r28
     988:	6b 5d       	subi	r22, 0xDB	; 219
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	68 96       	adiw	r28, 0x18	; 24
     98e:	8f ad       	ldd	r24, Y+63	; 0x3f
     990:	68 97       	sbiw	r28, 0x18	; 24
     992:	69 96       	adiw	r28, 0x19	; 25
     994:	9f ad       	ldd	r25, Y+63	; 0x3f
     996:	69 97       	sbiw	r28, 0x19	; 25
     998:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <transpose>
}
     99c:	c6 5a       	subi	r28, 0xA6	; 166
     99e:	df 4f       	sbci	r29, 0xFF	; 255
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	bf 90       	pop	r11
     9b6:	af 90       	pop	r10
     9b8:	9f 90       	pop	r9
     9ba:	8f 90       	pop	r8
     9bc:	7f 90       	pop	r7
     9be:	6f 90       	pop	r6
     9c0:	5f 90       	pop	r5
     9c2:	4f 90       	pop	r4
     9c4:	3f 90       	pop	r3
     9c6:	2f 90       	pop	r2
     9c8:	08 95       	ret

000009ca <__vector_14>:
			inverse[i][j] = b[i][j] / d;
		}
	}
}
ISR(TCC0_OVF_vect)
{
     9ca:	1f 92       	push	r1
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	0f 92       	push	r0
     9d2:	11 24       	eor	r1, r1
     9d4:	8f 93       	push	r24
	//<add code to increment a variable which keeps a record of number of overflows, total time count will be this variable * 256 + value of a>
	overflow_count+=1;
     9d6:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__data_end>
     9da:	8f 5f       	subi	r24, 0xFF	; 255
     9dc:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <__data_end>
	//return(overflow_count);
}
     9e0:	8f 91       	pop	r24
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0
     9e8:	1f 90       	pop	r1
     9ea:	18 95       	reti

000009ec <main>:

int main(void)
{
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	a4 97       	sbiw	r28, 0x24	; 36
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	de bf       	out	0x3e, r29	; 62
    /* Replace with your application code */
	//Overflow timer
	
	PMIC_EnableHighLevel();				//Enable interrupts : High level for timer
     9fa:	e0 ea       	ldi	r30, 0xA0	; 160
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	82 81       	ldd	r24, Z+2	; 0x02
     a00:	84 60       	ori	r24, 0x04	; 4
     a02:	82 83       	std	Z+2, r24	; 0x02
	TCC0.CTRLA = TC_CLKSEL_DIV1024_gc;		//Set Prescaler 1024(Same as CPU_PRESCALER)
     a04:	e0 e0       	ldi	r30, 0x00	; 0
     a06:	f8 e0       	ldi	r31, 0x08	; 8
     a08:	87 e0       	ldi	r24, 0x07	; 7
     a0a:	80 83       	st	Z, r24
	TCC0.CTRLB= TC_WGMODE_NORMAL_gc;    //Wave generation mode : Normal
     a0c:	11 82       	std	Z+1, r1	; 0x01
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;	//Enable overflow interrupt
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	86 83       	std	Z+6, r24	; 0x06
	TCC0.PER = 0xFF;		    //Initialize Period
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	86 a3       	std	Z+38, r24	; 0x26
     a18:	97 a3       	std	Z+39, r25	; 0x27
	
	sei();
     a1a:	78 94       	sei
	
	USARTXInit();
     a1c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <USARTXInit>
		
		float k=3, d;

		float abc[3][3] = {1,1,0,0,1,0,0,0,1};
			
		TCC0.CNT = 0;
     a20:	c1 2c       	mov	r12, r1
     a22:	68 94       	set
     a24:	dd 24       	eor	r13, r13
     a26:	d3 f8       	bld	r13, 3
    while (1) 
    {
		
		float k=3, d;

		float abc[3][3] = {1,1,0,0,1,0,0,0,1};
     a28:	84 e2       	ldi	r24, 0x24	; 36
     a2a:	e0 e0       	ldi	r30, 0x00	; 0
     a2c:	f0 e2       	ldi	r31, 0x20	; 32
     a2e:	de 01       	movw	r26, r28
     a30:	11 96       	adiw	r26, 0x01	; 1
     a32:	01 90       	ld	r0, Z+
     a34:	0d 92       	st	X+, r0
     a36:	8a 95       	dec	r24
     a38:	e1 f7       	brne	.-8      	; 0xa32 <main+0x46>
			
		TCC0.CNT = 0;
     a3a:	f6 01       	movw	r30, r12
     a3c:	10 a2       	std	Z+32, r1	; 0x20
     a3e:	11 a2       	std	Z+33, r1	; 0x21
     a40:	06 e0       	ldi	r16, 0x06	; 6
     a42:	10 e0       	ldi	r17, 0x00	; 0
		
		for(int j = 0; j < 6; j++){

			d = determinant(abc, k);
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e4       	ldi	r22, 0x40	; 64
     a4a:	70 e4       	ldi	r23, 0x40	; 64
     a4c:	ce 01       	movw	r24, r28
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <determinant>
			
			cofactor(abc, k);
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	60 e4       	ldi	r22, 0x40	; 64
     a5a:	70 e4       	ldi	r23, 0x40	; 64
     a5c:	ce 01       	movw	r24, r28
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	0e 94 60 03 	call	0x6c0	; 0x6c0 <cofactor>
			
			
			a = TCC0.CNT;
     a64:	f6 01       	movw	r30, r12
     a66:	e0 a0       	ldd	r14, Z+32	; 0x20
     a68:	f1 a0       	ldd	r15, Z+33	; 0x21
			USARTXTrans(0X00);
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USARTXTrans>
			USARTXTrans(overflow_count);
     a70:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__data_end>
     a74:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USARTXTrans>
			USARTXTrans(a);
     a78:	8e 2d       	mov	r24, r14
     a7a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USARTXTrans>
			USARTXTrans(0X00);
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USARTXTrans>
     a84:	01 50       	subi	r16, 0x01	; 1
     a86:	11 09       	sbc	r17, r1

		float abc[3][3] = {1,1,0,0,1,0,0,0,1};
			
		TCC0.CNT = 0;
		
		for(int j = 0; j < 6; j++){
     a88:	e9 f6       	brne	.-70     	; 0xa44 <main+0x58>
			USARTXTrans(a);
			USARTXTrans(0X00);
		}
		
		
		a = TCC0.CNT;
     a8a:	f6 01       	movw	r30, r12
     a8c:	00 a1       	ldd	r16, Z+32	; 0x20
     a8e:	11 a1       	ldd	r17, Z+33	; 0x21
		USARTXTrans(0Xff);
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USARTXTrans>
		USARTXTrans(overflow_count);
     a96:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <__data_end>
     a9a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USARTXTrans>
		USARTXTrans(a);
     a9e:	80 2f       	mov	r24, r16
     aa0:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USARTXTrans>
		USARTXTrans(0Xff);
     aa4:	8f ef       	ldi	r24, 0xFF	; 255
     aa6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <USARTXTrans>
		overflow_count = 0;
     aaa:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aae:	ff e3       	ldi	r31, 0x3F	; 63
     ab0:	2d e0       	ldi	r18, 0x0D	; 13
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	f1 50       	subi	r31, 0x01	; 1
     ab6:	20 40       	sbci	r18, 0x00	; 0
     ab8:	80 40       	sbci	r24, 0x00	; 0
     aba:	e1 f7       	brne	.-8      	; 0xab4 <main+0xc8>
     abc:	00 c0       	rjmp	.+0      	; 0xabe <main+0xd2>
     abe:	00 00       	nop
		_delay_ms(1000);

	}
     ac0:	b3 cf       	rjmp	.-154    	; 0xa28 <main+0x3c>

00000ac2 <__subsf3>:
     ac2:	50 58       	subi	r21, 0x80	; 128

00000ac4 <__addsf3>:
     ac4:	bb 27       	eor	r27, r27
     ac6:	aa 27       	eor	r26, r26
     ac8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__addsf3x>
     acc:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_round>
     ad0:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fp_pscA>
     ad4:	38 f0       	brcs	.+14     	; 0xae4 <__addsf3+0x20>
     ad6:	0e 94 44 06 	call	0xc88	; 0xc88 <__fp_pscB>
     ada:	20 f0       	brcs	.+8      	; 0xae4 <__addsf3+0x20>
     adc:	39 f4       	brne	.+14     	; 0xaec <__addsf3+0x28>
     ade:	9f 3f       	cpi	r25, 0xFF	; 255
     ae0:	19 f4       	brne	.+6      	; 0xae8 <__addsf3+0x24>
     ae2:	26 f4       	brtc	.+8      	; 0xaec <__addsf3+0x28>
     ae4:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_nan>
     ae8:	0e f4       	brtc	.+2      	; 0xaec <__addsf3+0x28>
     aea:	e0 95       	com	r30
     aec:	e7 fb       	bst	r30, 7
     aee:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>

00000af2 <__addsf3x>:
     af2:	e9 2f       	mov	r30, r25
     af4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_split3>
     af8:	58 f3       	brcs	.-42     	; 0xad0 <__addsf3+0xc>
     afa:	ba 17       	cp	r27, r26
     afc:	62 07       	cpc	r22, r18
     afe:	73 07       	cpc	r23, r19
     b00:	84 07       	cpc	r24, r20
     b02:	95 07       	cpc	r25, r21
     b04:	20 f0       	brcs	.+8      	; 0xb0e <__addsf3x+0x1c>
     b06:	79 f4       	brne	.+30     	; 0xb26 <__addsf3x+0x34>
     b08:	a6 f5       	brtc	.+104    	; 0xb72 <__addsf3x+0x80>
     b0a:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_zero>
     b0e:	0e f4       	brtc	.+2      	; 0xb12 <__addsf3x+0x20>
     b10:	e0 95       	com	r30
     b12:	0b 2e       	mov	r0, r27
     b14:	ba 2f       	mov	r27, r26
     b16:	a0 2d       	mov	r26, r0
     b18:	0b 01       	movw	r0, r22
     b1a:	b9 01       	movw	r22, r18
     b1c:	90 01       	movw	r18, r0
     b1e:	0c 01       	movw	r0, r24
     b20:	ca 01       	movw	r24, r20
     b22:	a0 01       	movw	r20, r0
     b24:	11 24       	eor	r1, r1
     b26:	ff 27       	eor	r31, r31
     b28:	59 1b       	sub	r21, r25
     b2a:	99 f0       	breq	.+38     	; 0xb52 <__addsf3x+0x60>
     b2c:	59 3f       	cpi	r21, 0xF9	; 249
     b2e:	50 f4       	brcc	.+20     	; 0xb44 <__addsf3x+0x52>
     b30:	50 3e       	cpi	r21, 0xE0	; 224
     b32:	68 f1       	brcs	.+90     	; 0xb8e <__addsf3x+0x9c>
     b34:	1a 16       	cp	r1, r26
     b36:	f0 40       	sbci	r31, 0x00	; 0
     b38:	a2 2f       	mov	r26, r18
     b3a:	23 2f       	mov	r18, r19
     b3c:	34 2f       	mov	r19, r20
     b3e:	44 27       	eor	r20, r20
     b40:	58 5f       	subi	r21, 0xF8	; 248
     b42:	f3 cf       	rjmp	.-26     	; 0xb2a <__addsf3x+0x38>
     b44:	46 95       	lsr	r20
     b46:	37 95       	ror	r19
     b48:	27 95       	ror	r18
     b4a:	a7 95       	ror	r26
     b4c:	f0 40       	sbci	r31, 0x00	; 0
     b4e:	53 95       	inc	r21
     b50:	c9 f7       	brne	.-14     	; 0xb44 <__addsf3x+0x52>
     b52:	7e f4       	brtc	.+30     	; 0xb72 <__addsf3x+0x80>
     b54:	1f 16       	cp	r1, r31
     b56:	ba 0b       	sbc	r27, r26
     b58:	62 0b       	sbc	r22, r18
     b5a:	73 0b       	sbc	r23, r19
     b5c:	84 0b       	sbc	r24, r20
     b5e:	ba f0       	brmi	.+46     	; 0xb8e <__addsf3x+0x9c>
     b60:	91 50       	subi	r25, 0x01	; 1
     b62:	a1 f0       	breq	.+40     	; 0xb8c <__addsf3x+0x9a>
     b64:	ff 0f       	add	r31, r31
     b66:	bb 1f       	adc	r27, r27
     b68:	66 1f       	adc	r22, r22
     b6a:	77 1f       	adc	r23, r23
     b6c:	88 1f       	adc	r24, r24
     b6e:	c2 f7       	brpl	.-16     	; 0xb60 <__addsf3x+0x6e>
     b70:	0e c0       	rjmp	.+28     	; 0xb8e <__addsf3x+0x9c>
     b72:	ba 0f       	add	r27, r26
     b74:	62 1f       	adc	r22, r18
     b76:	73 1f       	adc	r23, r19
     b78:	84 1f       	adc	r24, r20
     b7a:	48 f4       	brcc	.+18     	; 0xb8e <__addsf3x+0x9c>
     b7c:	87 95       	ror	r24
     b7e:	77 95       	ror	r23
     b80:	67 95       	ror	r22
     b82:	b7 95       	ror	r27
     b84:	f7 95       	ror	r31
     b86:	9e 3f       	cpi	r25, 0xFE	; 254
     b88:	08 f0       	brcs	.+2      	; 0xb8c <__addsf3x+0x9a>
     b8a:	b0 cf       	rjmp	.-160    	; 0xaec <__addsf3+0x28>
     b8c:	93 95       	inc	r25
     b8e:	88 0f       	add	r24, r24
     b90:	08 f0       	brcs	.+2      	; 0xb94 <__addsf3x+0xa2>
     b92:	99 27       	eor	r25, r25
     b94:	ee 0f       	add	r30, r30
     b96:	97 95       	ror	r25
     b98:	87 95       	ror	r24
     b9a:	08 95       	ret

00000b9c <__cmpsf2>:
     b9c:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_cmp>
     ba0:	08 f4       	brcc	.+2      	; 0xba4 <__cmpsf2+0x8>
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	08 95       	ret

00000ba6 <__floatunsisf>:
     ba6:	e8 94       	clt
     ba8:	09 c0       	rjmp	.+18     	; 0xbbc <__floatsisf+0x12>

00000baa <__floatsisf>:
     baa:	97 fb       	bst	r25, 7
     bac:	3e f4       	brtc	.+14     	; 0xbbc <__floatsisf+0x12>
     bae:	90 95       	com	r25
     bb0:	80 95       	com	r24
     bb2:	70 95       	com	r23
     bb4:	61 95       	neg	r22
     bb6:	7f 4f       	sbci	r23, 0xFF	; 255
     bb8:	8f 4f       	sbci	r24, 0xFF	; 255
     bba:	9f 4f       	sbci	r25, 0xFF	; 255
     bbc:	99 23       	and	r25, r25
     bbe:	a9 f0       	breq	.+42     	; 0xbea <__floatsisf+0x40>
     bc0:	f9 2f       	mov	r31, r25
     bc2:	96 e9       	ldi	r25, 0x96	; 150
     bc4:	bb 27       	eor	r27, r27
     bc6:	93 95       	inc	r25
     bc8:	f6 95       	lsr	r31
     bca:	87 95       	ror	r24
     bcc:	77 95       	ror	r23
     bce:	67 95       	ror	r22
     bd0:	b7 95       	ror	r27
     bd2:	f1 11       	cpse	r31, r1
     bd4:	f8 cf       	rjmp	.-16     	; 0xbc6 <__floatsisf+0x1c>
     bd6:	fa f4       	brpl	.+62     	; 0xc16 <__floatsisf+0x6c>
     bd8:	bb 0f       	add	r27, r27
     bda:	11 f4       	brne	.+4      	; 0xbe0 <__floatsisf+0x36>
     bdc:	60 ff       	sbrs	r22, 0
     bde:	1b c0       	rjmp	.+54     	; 0xc16 <__floatsisf+0x6c>
     be0:	6f 5f       	subi	r22, 0xFF	; 255
     be2:	7f 4f       	sbci	r23, 0xFF	; 255
     be4:	8f 4f       	sbci	r24, 0xFF	; 255
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	16 c0       	rjmp	.+44     	; 0xc16 <__floatsisf+0x6c>
     bea:	88 23       	and	r24, r24
     bec:	11 f0       	breq	.+4      	; 0xbf2 <__floatsisf+0x48>
     bee:	96 e9       	ldi	r25, 0x96	; 150
     bf0:	11 c0       	rjmp	.+34     	; 0xc14 <__floatsisf+0x6a>
     bf2:	77 23       	and	r23, r23
     bf4:	21 f0       	breq	.+8      	; 0xbfe <__floatsisf+0x54>
     bf6:	9e e8       	ldi	r25, 0x8E	; 142
     bf8:	87 2f       	mov	r24, r23
     bfa:	76 2f       	mov	r23, r22
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <__floatsisf+0x5e>
     bfe:	66 23       	and	r22, r22
     c00:	71 f0       	breq	.+28     	; 0xc1e <__floatsisf+0x74>
     c02:	96 e8       	ldi	r25, 0x86	; 134
     c04:	86 2f       	mov	r24, r22
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	2a f0       	brmi	.+10     	; 0xc16 <__floatsisf+0x6c>
     c0c:	9a 95       	dec	r25
     c0e:	66 0f       	add	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	da f7       	brpl	.-10     	; 0xc0c <__floatsisf+0x62>
     c16:	88 0f       	add	r24, r24
     c18:	96 95       	lsr	r25
     c1a:	87 95       	ror	r24
     c1c:	97 f9       	bld	r25, 7
     c1e:	08 95       	ret

00000c20 <__fp_cmp>:
     c20:	99 0f       	add	r25, r25
     c22:	00 08       	sbc	r0, r0
     c24:	55 0f       	add	r21, r21
     c26:	aa 0b       	sbc	r26, r26
     c28:	e0 e8       	ldi	r30, 0x80	; 128
     c2a:	fe ef       	ldi	r31, 0xFE	; 254
     c2c:	16 16       	cp	r1, r22
     c2e:	17 06       	cpc	r1, r23
     c30:	e8 07       	cpc	r30, r24
     c32:	f9 07       	cpc	r31, r25
     c34:	c0 f0       	brcs	.+48     	; 0xc66 <__fp_cmp+0x46>
     c36:	12 16       	cp	r1, r18
     c38:	13 06       	cpc	r1, r19
     c3a:	e4 07       	cpc	r30, r20
     c3c:	f5 07       	cpc	r31, r21
     c3e:	98 f0       	brcs	.+38     	; 0xc66 <__fp_cmp+0x46>
     c40:	62 1b       	sub	r22, r18
     c42:	73 0b       	sbc	r23, r19
     c44:	84 0b       	sbc	r24, r20
     c46:	95 0b       	sbc	r25, r21
     c48:	39 f4       	brne	.+14     	; 0xc58 <__fp_cmp+0x38>
     c4a:	0a 26       	eor	r0, r26
     c4c:	61 f0       	breq	.+24     	; 0xc66 <__fp_cmp+0x46>
     c4e:	23 2b       	or	r18, r19
     c50:	24 2b       	or	r18, r20
     c52:	25 2b       	or	r18, r21
     c54:	21 f4       	brne	.+8      	; 0xc5e <__fp_cmp+0x3e>
     c56:	08 95       	ret
     c58:	0a 26       	eor	r0, r26
     c5a:	09 f4       	brne	.+2      	; 0xc5e <__fp_cmp+0x3e>
     c5c:	a1 40       	sbci	r26, 0x01	; 1
     c5e:	a6 95       	lsr	r26
     c60:	8f ef       	ldi	r24, 0xFF	; 255
     c62:	81 1d       	adc	r24, r1
     c64:	81 1d       	adc	r24, r1
     c66:	08 95       	ret

00000c68 <__fp_inf>:
     c68:	97 f9       	bld	r25, 7
     c6a:	9f 67       	ori	r25, 0x7F	; 127
     c6c:	80 e8       	ldi	r24, 0x80	; 128
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	08 95       	ret

00000c74 <__fp_nan>:
     c74:	9f ef       	ldi	r25, 0xFF	; 255
     c76:	80 ec       	ldi	r24, 0xC0	; 192
     c78:	08 95       	ret

00000c7a <__fp_pscA>:
     c7a:	00 24       	eor	r0, r0
     c7c:	0a 94       	dec	r0
     c7e:	16 16       	cp	r1, r22
     c80:	17 06       	cpc	r1, r23
     c82:	18 06       	cpc	r1, r24
     c84:	09 06       	cpc	r0, r25
     c86:	08 95       	ret

00000c88 <__fp_pscB>:
     c88:	00 24       	eor	r0, r0
     c8a:	0a 94       	dec	r0
     c8c:	12 16       	cp	r1, r18
     c8e:	13 06       	cpc	r1, r19
     c90:	14 06       	cpc	r1, r20
     c92:	05 06       	cpc	r0, r21
     c94:	08 95       	ret

00000c96 <__fp_round>:
     c96:	09 2e       	mov	r0, r25
     c98:	03 94       	inc	r0
     c9a:	00 0c       	add	r0, r0
     c9c:	11 f4       	brne	.+4      	; 0xca2 <__fp_round+0xc>
     c9e:	88 23       	and	r24, r24
     ca0:	52 f0       	brmi	.+20     	; 0xcb6 <__fp_round+0x20>
     ca2:	bb 0f       	add	r27, r27
     ca4:	40 f4       	brcc	.+16     	; 0xcb6 <__fp_round+0x20>
     ca6:	bf 2b       	or	r27, r31
     ca8:	11 f4       	brne	.+4      	; 0xcae <__fp_round+0x18>
     caa:	60 ff       	sbrs	r22, 0
     cac:	04 c0       	rjmp	.+8      	; 0xcb6 <__fp_round+0x20>
     cae:	6f 5f       	subi	r22, 0xFF	; 255
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	8f 4f       	sbci	r24, 0xFF	; 255
     cb4:	9f 4f       	sbci	r25, 0xFF	; 255
     cb6:	08 95       	ret

00000cb8 <__fp_split3>:
     cb8:	57 fd       	sbrc	r21, 7
     cba:	90 58       	subi	r25, 0x80	; 128
     cbc:	44 0f       	add	r20, r20
     cbe:	55 1f       	adc	r21, r21
     cc0:	59 f0       	breq	.+22     	; 0xcd8 <__fp_splitA+0x10>
     cc2:	5f 3f       	cpi	r21, 0xFF	; 255
     cc4:	71 f0       	breq	.+28     	; 0xce2 <__fp_splitA+0x1a>
     cc6:	47 95       	ror	r20

00000cc8 <__fp_splitA>:
     cc8:	88 0f       	add	r24, r24
     cca:	97 fb       	bst	r25, 7
     ccc:	99 1f       	adc	r25, r25
     cce:	61 f0       	breq	.+24     	; 0xce8 <__fp_splitA+0x20>
     cd0:	9f 3f       	cpi	r25, 0xFF	; 255
     cd2:	79 f0       	breq	.+30     	; 0xcf2 <__fp_splitA+0x2a>
     cd4:	87 95       	ror	r24
     cd6:	08 95       	ret
     cd8:	12 16       	cp	r1, r18
     cda:	13 06       	cpc	r1, r19
     cdc:	14 06       	cpc	r1, r20
     cde:	55 1f       	adc	r21, r21
     ce0:	f2 cf       	rjmp	.-28     	; 0xcc6 <__fp_split3+0xe>
     ce2:	46 95       	lsr	r20
     ce4:	f1 df       	rcall	.-30     	; 0xcc8 <__fp_splitA>
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <__fp_splitA+0x30>
     ce8:	16 16       	cp	r1, r22
     cea:	17 06       	cpc	r1, r23
     cec:	18 06       	cpc	r1, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	f1 cf       	rjmp	.-30     	; 0xcd4 <__fp_splitA+0xc>
     cf2:	86 95       	lsr	r24
     cf4:	71 05       	cpc	r23, r1
     cf6:	61 05       	cpc	r22, r1
     cf8:	08 94       	sec
     cfa:	08 95       	ret

00000cfc <__fp_zero>:
     cfc:	e8 94       	clt

00000cfe <__fp_szero>:
     cfe:	bb 27       	eor	r27, r27
     d00:	66 27       	eor	r22, r22
     d02:	77 27       	eor	r23, r23
     d04:	cb 01       	movw	r24, r22
     d06:	97 f9       	bld	r25, 7
     d08:	08 95       	ret

00000d0a <__gesf2>:
     d0a:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_cmp>
     d0e:	08 f4       	brcc	.+2      	; 0xd12 <__gesf2+0x8>
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	08 95       	ret

00000d14 <__mulsf3>:
     d14:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulsf3x>
     d18:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_round>
     d1c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fp_pscA>
     d20:	38 f0       	brcs	.+14     	; 0xd30 <__mulsf3+0x1c>
     d22:	0e 94 44 06 	call	0xc88	; 0xc88 <__fp_pscB>
     d26:	20 f0       	brcs	.+8      	; 0xd30 <__mulsf3+0x1c>
     d28:	95 23       	and	r25, r21
     d2a:	11 f0       	breq	.+4      	; 0xd30 <__mulsf3+0x1c>
     d2c:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>
     d30:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_nan>
     d34:	11 24       	eor	r1, r1
     d36:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_szero>

00000d3a <__mulsf3x>:
     d3a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_split3>
     d3e:	70 f3       	brcs	.-36     	; 0xd1c <__mulsf3+0x8>

00000d40 <__mulsf3_pse>:
     d40:	95 9f       	mul	r25, r21
     d42:	c1 f3       	breq	.-16     	; 0xd34 <__mulsf3+0x20>
     d44:	95 0f       	add	r25, r21
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	55 1f       	adc	r21, r21
     d4a:	62 9f       	mul	r22, r18
     d4c:	f0 01       	movw	r30, r0
     d4e:	72 9f       	mul	r23, r18
     d50:	bb 27       	eor	r27, r27
     d52:	f0 0d       	add	r31, r0
     d54:	b1 1d       	adc	r27, r1
     d56:	63 9f       	mul	r22, r19
     d58:	aa 27       	eor	r26, r26
     d5a:	f0 0d       	add	r31, r0
     d5c:	b1 1d       	adc	r27, r1
     d5e:	aa 1f       	adc	r26, r26
     d60:	64 9f       	mul	r22, r20
     d62:	66 27       	eor	r22, r22
     d64:	b0 0d       	add	r27, r0
     d66:	a1 1d       	adc	r26, r1
     d68:	66 1f       	adc	r22, r22
     d6a:	82 9f       	mul	r24, r18
     d6c:	22 27       	eor	r18, r18
     d6e:	b0 0d       	add	r27, r0
     d70:	a1 1d       	adc	r26, r1
     d72:	62 1f       	adc	r22, r18
     d74:	73 9f       	mul	r23, r19
     d76:	b0 0d       	add	r27, r0
     d78:	a1 1d       	adc	r26, r1
     d7a:	62 1f       	adc	r22, r18
     d7c:	83 9f       	mul	r24, r19
     d7e:	a0 0d       	add	r26, r0
     d80:	61 1d       	adc	r22, r1
     d82:	22 1f       	adc	r18, r18
     d84:	74 9f       	mul	r23, r20
     d86:	33 27       	eor	r19, r19
     d88:	a0 0d       	add	r26, r0
     d8a:	61 1d       	adc	r22, r1
     d8c:	23 1f       	adc	r18, r19
     d8e:	84 9f       	mul	r24, r20
     d90:	60 0d       	add	r22, r0
     d92:	21 1d       	adc	r18, r1
     d94:	82 2f       	mov	r24, r18
     d96:	76 2f       	mov	r23, r22
     d98:	6a 2f       	mov	r22, r26
     d9a:	11 24       	eor	r1, r1
     d9c:	9f 57       	subi	r25, 0x7F	; 127
     d9e:	50 40       	sbci	r21, 0x00	; 0
     da0:	9a f0       	brmi	.+38     	; 0xdc8 <__mulsf3_pse+0x88>
     da2:	f1 f0       	breq	.+60     	; 0xde0 <__mulsf3_pse+0xa0>
     da4:	88 23       	and	r24, r24
     da6:	4a f0       	brmi	.+18     	; 0xdba <__mulsf3_pse+0x7a>
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	bb 1f       	adc	r27, r27
     dae:	66 1f       	adc	r22, r22
     db0:	77 1f       	adc	r23, r23
     db2:	88 1f       	adc	r24, r24
     db4:	91 50       	subi	r25, 0x01	; 1
     db6:	50 40       	sbci	r21, 0x00	; 0
     db8:	a9 f7       	brne	.-22     	; 0xda4 <__mulsf3_pse+0x64>
     dba:	9e 3f       	cpi	r25, 0xFE	; 254
     dbc:	51 05       	cpc	r21, r1
     dbe:	80 f0       	brcs	.+32     	; 0xde0 <__mulsf3_pse+0xa0>
     dc0:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>
     dc4:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_szero>
     dc8:	5f 3f       	cpi	r21, 0xFF	; 255
     dca:	e4 f3       	brlt	.-8      	; 0xdc4 <__mulsf3_pse+0x84>
     dcc:	98 3e       	cpi	r25, 0xE8	; 232
     dce:	d4 f3       	brlt	.-12     	; 0xdc4 <__mulsf3_pse+0x84>
     dd0:	86 95       	lsr	r24
     dd2:	77 95       	ror	r23
     dd4:	67 95       	ror	r22
     dd6:	b7 95       	ror	r27
     dd8:	f7 95       	ror	r31
     dda:	e7 95       	ror	r30
     ddc:	9f 5f       	subi	r25, 0xFF	; 255
     dde:	c1 f7       	brne	.-16     	; 0xdd0 <__mulsf3_pse+0x90>
     de0:	fe 2b       	or	r31, r30
     de2:	88 0f       	add	r24, r24
     de4:	91 1d       	adc	r25, r1
     de6:	96 95       	lsr	r25
     de8:	87 95       	ror	r24
     dea:	97 f9       	bld	r25, 7
     dec:	08 95       	ret

00000dee <pow>:
     dee:	fa 01       	movw	r30, r20
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31
     df4:	30 96       	adiw	r30, 0x00	; 0
     df6:	21 05       	cpc	r18, r1
     df8:	31 05       	cpc	r19, r1
     dfa:	a1 f1       	breq	.+104    	; 0xe64 <pow+0x76>
     dfc:	61 15       	cp	r22, r1
     dfe:	71 05       	cpc	r23, r1
     e00:	61 f4       	brne	.+24     	; 0xe1a <pow+0x2c>
     e02:	80 38       	cpi	r24, 0x80	; 128
     e04:	bf e3       	ldi	r27, 0x3F	; 63
     e06:	9b 07       	cpc	r25, r27
     e08:	49 f1       	breq	.+82     	; 0xe5c <pow+0x6e>
     e0a:	68 94       	set
     e0c:	90 38       	cpi	r25, 0x80	; 128
     e0e:	81 05       	cpc	r24, r1
     e10:	61 f0       	breq	.+24     	; 0xe2a <pow+0x3c>
     e12:	80 38       	cpi	r24, 0x80	; 128
     e14:	bf ef       	ldi	r27, 0xFF	; 255
     e16:	9b 07       	cpc	r25, r27
     e18:	41 f0       	breq	.+16     	; 0xe2a <pow+0x3c>
     e1a:	99 23       	and	r25, r25
     e1c:	4a f5       	brpl	.+82     	; 0xe70 <pow+0x82>
     e1e:	ff 3f       	cpi	r31, 0xFF	; 255
     e20:	e1 05       	cpc	r30, r1
     e22:	31 05       	cpc	r19, r1
     e24:	21 05       	cpc	r18, r1
     e26:	19 f1       	breq	.+70     	; 0xe6e <pow+0x80>
     e28:	e8 94       	clt
     e2a:	08 94       	sec
     e2c:	e7 95       	ror	r30
     e2e:	d9 01       	movw	r26, r18
     e30:	aa 23       	and	r26, r26
     e32:	29 f4       	brne	.+10     	; 0xe3e <pow+0x50>
     e34:	ab 2f       	mov	r26, r27
     e36:	be 2f       	mov	r27, r30
     e38:	f8 5f       	subi	r31, 0xF8	; 248
     e3a:	d0 f3       	brcs	.-12     	; 0xe30 <pow+0x42>
     e3c:	10 c0       	rjmp	.+32     	; 0xe5e <pow+0x70>
     e3e:	ff 5f       	subi	r31, 0xFF	; 255
     e40:	70 f4       	brcc	.+28     	; 0xe5e <pow+0x70>
     e42:	a6 95       	lsr	r26
     e44:	e0 f7       	brcc	.-8      	; 0xe3e <pow+0x50>
     e46:	f7 39       	cpi	r31, 0x97	; 151
     e48:	50 f0       	brcs	.+20     	; 0xe5e <pow+0x70>
     e4a:	19 f0       	breq	.+6      	; 0xe52 <pow+0x64>
     e4c:	ff 3a       	cpi	r31, 0xAF	; 175
     e4e:	38 f4       	brcc	.+14     	; 0xe5e <pow+0x70>
     e50:	9f 77       	andi	r25, 0x7F	; 127
     e52:	9f 93       	push	r25
     e54:	0d d0       	rcall	.+26     	; 0xe70 <pow+0x82>
     e56:	0f 90       	pop	r0
     e58:	07 fc       	sbrc	r0, 7
     e5a:	90 58       	subi	r25, 0x80	; 128
     e5c:	08 95       	ret
     e5e:	46 f0       	brts	.+16     	; 0xe70 <pow+0x82>
     e60:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_nan>
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	80 e8       	ldi	r24, 0x80	; 128
     e6a:	9f e3       	ldi	r25, 0x3F	; 63
     e6c:	08 95       	ret
     e6e:	4f e7       	ldi	r20, 0x7F	; 127
     e70:	9f 77       	andi	r25, 0x7F	; 127
     e72:	5f 93       	push	r21
     e74:	4f 93       	push	r20
     e76:	3f 93       	push	r19
     e78:	2f 93       	push	r18
     e7a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <log>
     e7e:	2f 91       	pop	r18
     e80:	3f 91       	pop	r19
     e82:	4f 91       	pop	r20
     e84:	5f 91       	pop	r21
     e86:	0e 94 8a 06 	call	0xd14	; 0xd14 <__mulsf3>
     e8a:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <exp>
     e8e:	29 f4       	brne	.+10     	; 0xe9a <pow+0xac>
     e90:	16 f0       	brts	.+4      	; 0xe96 <pow+0xa8>
     e92:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>
     e96:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__fp_zero>
     e9a:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_nan>

00000e9e <exp>:
     e9e:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fp_splitA>
     ea2:	a8 f3       	brcs	.-22     	; 0xe8e <pow+0xa0>
     ea4:	96 38       	cpi	r25, 0x86	; 134
     ea6:	a0 f7       	brcc	.-24     	; 0xe90 <pow+0xa2>
     ea8:	07 f8       	bld	r0, 7
     eaa:	0f 92       	push	r0
     eac:	e8 94       	clt
     eae:	2b e3       	ldi	r18, 0x3B	; 59
     eb0:	3a ea       	ldi	r19, 0xAA	; 170
     eb2:	48 eb       	ldi	r20, 0xB8	; 184
     eb4:	5f e7       	ldi	r21, 0x7F	; 127
     eb6:	0e 94 a0 06 	call	0xd40	; 0xd40 <__mulsf3_pse>
     eba:	0f 92       	push	r0
     ebc:	0f 92       	push	r0
     ebe:	0f 92       	push	r0
     ec0:	4d b7       	in	r20, 0x3d	; 61
     ec2:	5e b7       	in	r21, 0x3e	; 62
     ec4:	0f 92       	push	r0
     ec6:	0e 94 3a 08 	call	0x1074	; 0x1074 <modf>
     eca:	ec ef       	ldi	r30, 0xFC	; 252
     ecc:	f1 e0       	ldi	r31, 0x01	; 1
     ece:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_powser>
     ed2:	4f 91       	pop	r20
     ed4:	5f 91       	pop	r21
     ed6:	ef 91       	pop	r30
     ed8:	ff 91       	pop	r31
     eda:	e5 95       	asr	r30
     edc:	ee 1f       	adc	r30, r30
     ede:	ff 1f       	adc	r31, r31
     ee0:	49 f0       	breq	.+18     	; 0xef4 <exp+0x56>
     ee2:	fe 57       	subi	r31, 0x7E	; 126
     ee4:	e0 68       	ori	r30, 0x80	; 128
     ee6:	44 27       	eor	r20, r20
     ee8:	ee 0f       	add	r30, r30
     eea:	44 1f       	adc	r20, r20
     eec:	fa 95       	dec	r31
     eee:	e1 f7       	brne	.-8      	; 0xee8 <exp+0x4a>
     ef0:	41 95       	neg	r20
     ef2:	55 0b       	sbc	r21, r21
     ef4:	0e 94 b4 07 	call	0xf68	; 0xf68 <ldexp>
     ef8:	0f 90       	pop	r0
     efa:	07 fe       	sbrs	r0, 7
     efc:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <inverse>
     f00:	08 95       	ret

00000f02 <__fp_powser>:
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	1f 93       	push	r17
     f08:	0f 93       	push	r16
     f0a:	ff 92       	push	r15
     f0c:	ef 92       	push	r14
     f0e:	df 92       	push	r13
     f10:	7b 01       	movw	r14, r22
     f12:	8c 01       	movw	r16, r24
     f14:	68 94       	set
     f16:	06 c0       	rjmp	.+12     	; 0xf24 <__fp_powser+0x22>
     f18:	da 2e       	mov	r13, r26
     f1a:	ef 01       	movw	r28, r30
     f1c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulsf3x>
     f20:	fe 01       	movw	r30, r28
     f22:	e8 94       	clt
     f24:	a5 91       	lpm	r26, Z+
     f26:	25 91       	lpm	r18, Z+
     f28:	35 91       	lpm	r19, Z+
     f2a:	45 91       	lpm	r20, Z+
     f2c:	55 91       	lpm	r21, Z+
     f2e:	a6 f3       	brts	.-24     	; 0xf18 <__fp_powser+0x16>
     f30:	ef 01       	movw	r28, r30
     f32:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__addsf3x>
     f36:	fe 01       	movw	r30, r28
     f38:	97 01       	movw	r18, r14
     f3a:	a8 01       	movw	r20, r16
     f3c:	da 94       	dec	r13
     f3e:	69 f7       	brne	.-38     	; 0xf1a <__fp_powser+0x18>
     f40:	df 90       	pop	r13
     f42:	ef 90       	pop	r14
     f44:	ff 90       	pop	r15
     f46:	0f 91       	pop	r16
     f48:	1f 91       	pop	r17
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <inverse>:
     f50:	9b 01       	movw	r18, r22
     f52:	ac 01       	movw	r20, r24
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	80 e8       	ldi	r24, 0x80	; 128
     f5a:	9f e3       	ldi	r25, 0x3F	; 63
     f5c:	0c 94 6e 08 	jmp	0x10dc	; 0x10dc <__divsf3>
     f60:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>
     f64:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_mpack>

00000f68 <ldexp>:
     f68:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fp_splitA>
     f6c:	d8 f3       	brcs	.-10     	; 0xf64 <inverse+0x14>
     f6e:	99 23       	and	r25, r25
     f70:	c9 f3       	breq	.-14     	; 0xf64 <inverse+0x14>
     f72:	94 0f       	add	r25, r20
     f74:	51 1d       	adc	r21, r1
     f76:	a3 f3       	brvs	.-24     	; 0xf60 <inverse+0x10>
     f78:	91 50       	subi	r25, 0x01	; 1
     f7a:	50 40       	sbci	r21, 0x00	; 0
     f7c:	94 f0       	brlt	.+36     	; 0xfa2 <ldexp+0x3a>
     f7e:	59 f0       	breq	.+22     	; 0xf96 <ldexp+0x2e>
     f80:	88 23       	and	r24, r24
     f82:	32 f0       	brmi	.+12     	; 0xf90 <ldexp+0x28>
     f84:	66 0f       	add	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	88 1f       	adc	r24, r24
     f8a:	91 50       	subi	r25, 0x01	; 1
     f8c:	50 40       	sbci	r21, 0x00	; 0
     f8e:	c1 f7       	brne	.-16     	; 0xf80 <ldexp+0x18>
     f90:	9e 3f       	cpi	r25, 0xFE	; 254
     f92:	51 05       	cpc	r21, r1
     f94:	2c f7       	brge	.-54     	; 0xf60 <inverse+0x10>
     f96:	88 0f       	add	r24, r24
     f98:	91 1d       	adc	r25, r1
     f9a:	96 95       	lsr	r25
     f9c:	87 95       	ror	r24
     f9e:	97 f9       	bld	r25, 7
     fa0:	08 95       	ret
     fa2:	5f 3f       	cpi	r21, 0xFF	; 255
     fa4:	ac f0       	brlt	.+42     	; 0xfd0 <ldexp+0x68>
     fa6:	98 3e       	cpi	r25, 0xE8	; 232
     fa8:	9c f0       	brlt	.+38     	; 0xfd0 <ldexp+0x68>
     faa:	bb 27       	eor	r27, r27
     fac:	86 95       	lsr	r24
     fae:	77 95       	ror	r23
     fb0:	67 95       	ror	r22
     fb2:	b7 95       	ror	r27
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <ldexp+0x50>
     fb6:	b1 60       	ori	r27, 0x01	; 1
     fb8:	93 95       	inc	r25
     fba:	c1 f7       	brne	.-16     	; 0xfac <ldexp+0x44>
     fbc:	bb 0f       	add	r27, r27
     fbe:	58 f7       	brcc	.-42     	; 0xf96 <ldexp+0x2e>
     fc0:	11 f4       	brne	.+4      	; 0xfc6 <ldexp+0x5e>
     fc2:	60 ff       	sbrs	r22, 0
     fc4:	e8 cf       	rjmp	.-48     	; 0xf96 <ldexp+0x2e>
     fc6:	6f 5f       	subi	r22, 0xFF	; 255
     fc8:	7f 4f       	sbci	r23, 0xFF	; 255
     fca:	8f 4f       	sbci	r24, 0xFF	; 255
     fcc:	9f 4f       	sbci	r25, 0xFF	; 255
     fce:	e3 cf       	rjmp	.-58     	; 0xf96 <ldexp+0x2e>
     fd0:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_szero>
     fd4:	16 f0       	brts	.+4      	; 0xfda <ldexp+0x72>
     fd6:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_mpack>
     fda:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_nan>
     fde:	68 94       	set
     fe0:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>

00000fe4 <log>:
     fe4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <__fp_splitA>
     fe8:	a8 f3       	brcs	.-22     	; 0xfd4 <ldexp+0x6c>
     fea:	99 23       	and	r25, r25
     fec:	c1 f3       	breq	.-16     	; 0xfde <ldexp+0x76>
     fee:	ae f3       	brts	.-22     	; 0xfda <ldexp+0x72>
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	1f 93       	push	r17
     ff6:	0f 93       	push	r16
     ff8:	ff 92       	push	r15
     ffa:	c9 2f       	mov	r28, r25
     ffc:	dd 27       	eor	r29, r29
     ffe:	88 23       	and	r24, r24
    1000:	2a f0       	brmi	.+10     	; 0x100c <log+0x28>
    1002:	21 97       	sbiw	r28, 0x01	; 1
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	88 1f       	adc	r24, r24
    100a:	da f7       	brpl	.-10     	; 0x1002 <log+0x1e>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f eb       	ldi	r21, 0xBF	; 191
    1014:	9f e3       	ldi	r25, 0x3F	; 63
    1016:	88 39       	cpi	r24, 0x98	; 152
    1018:	20 f0       	brcs	.+8      	; 0x1022 <log+0x3e>
    101a:	80 3e       	cpi	r24, 0xE0	; 224
    101c:	38 f0       	brcs	.+14     	; 0x102c <log+0x48>
    101e:	21 96       	adiw	r28, 0x01	; 1
    1020:	8f 77       	andi	r24, 0x7F	; 127
    1022:	0e 94 62 05 	call	0xac4	; 0xac4 <__addsf3>
    1026:	e4 e2       	ldi	r30, 0x24	; 36
    1028:	f2 e0       	ldi	r31, 0x02	; 2
    102a:	04 c0       	rjmp	.+8      	; 0x1034 <log+0x50>
    102c:	0e 94 62 05 	call	0xac4	; 0xac4 <__addsf3>
    1030:	e1 e5       	ldi	r30, 0x51	; 81
    1032:	f2 e0       	ldi	r31, 0x02	; 2
    1034:	0e 94 81 07 	call	0xf02	; 0xf02 <__fp_powser>
    1038:	8b 01       	movw	r16, r22
    103a:	be 01       	movw	r22, r28
    103c:	ec 01       	movw	r28, r24
    103e:	fb 2e       	mov	r15, r27
    1040:	6f 57       	subi	r22, 0x7F	; 127
    1042:	71 09       	sbc	r23, r1
    1044:	75 95       	asr	r23
    1046:	77 1f       	adc	r23, r23
    1048:	88 0b       	sbc	r24, r24
    104a:	99 0b       	sbc	r25, r25
    104c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__floatsisf>
    1050:	28 e1       	ldi	r18, 0x18	; 24
    1052:	32 e7       	ldi	r19, 0x72	; 114
    1054:	41 e3       	ldi	r20, 0x31	; 49
    1056:	5f e3       	ldi	r21, 0x3F	; 63
    1058:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__mulsf3x>
    105c:	af 2d       	mov	r26, r15
    105e:	98 01       	movw	r18, r16
    1060:	ae 01       	movw	r20, r28
    1062:	ff 90       	pop	r15
    1064:	0f 91       	pop	r16
    1066:	1f 91       	pop	r17
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__addsf3x>
    1070:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_round>

00001074 <modf>:
    1074:	fa 01       	movw	r30, r20
    1076:	dc 01       	movw	r26, r24
    1078:	aa 0f       	add	r26, r26
    107a:	bb 1f       	adc	r27, r27
    107c:	9b 01       	movw	r18, r22
    107e:	ac 01       	movw	r20, r24
    1080:	bf 57       	subi	r27, 0x7F	; 127
    1082:	28 f4       	brcc	.+10     	; 0x108e <modf+0x1a>
    1084:	22 27       	eor	r18, r18
    1086:	33 27       	eor	r19, r19
    1088:	44 27       	eor	r20, r20
    108a:	50 78       	andi	r21, 0x80	; 128
    108c:	20 c0       	rjmp	.+64     	; 0x10ce <modf+0x5a>
    108e:	b7 51       	subi	r27, 0x17	; 23
    1090:	90 f4       	brcc	.+36     	; 0x10b6 <modf+0x42>
    1092:	ab 2f       	mov	r26, r27
    1094:	00 24       	eor	r0, r0
    1096:	46 95       	lsr	r20
    1098:	37 95       	ror	r19
    109a:	27 95       	ror	r18
    109c:	01 1c       	adc	r0, r1
    109e:	a3 95       	inc	r26
    10a0:	d2 f3       	brmi	.-12     	; 0x1096 <modf+0x22>
    10a2:	00 20       	and	r0, r0
    10a4:	71 f0       	breq	.+28     	; 0x10c2 <modf+0x4e>
    10a6:	22 0f       	add	r18, r18
    10a8:	33 1f       	adc	r19, r19
    10aa:	44 1f       	adc	r20, r20
    10ac:	b3 95       	inc	r27
    10ae:	da f3       	brmi	.-10     	; 0x10a6 <modf+0x32>
    10b0:	0e d0       	rcall	.+28     	; 0x10ce <modf+0x5a>
    10b2:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__subsf3>
    10b6:	61 30       	cpi	r22, 0x01	; 1
    10b8:	71 05       	cpc	r23, r1
    10ba:	a0 e8       	ldi	r26, 0x80	; 128
    10bc:	8a 07       	cpc	r24, r26
    10be:	b9 46       	sbci	r27, 0x69	; 105
    10c0:	30 f4       	brcc	.+12     	; 0x10ce <modf+0x5a>
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	66 27       	eor	r22, r22
    10c8:	77 27       	eor	r23, r23
    10ca:	88 27       	eor	r24, r24
    10cc:	90 78       	andi	r25, 0x80	; 128
    10ce:	30 96       	adiw	r30, 0x00	; 0
    10d0:	21 f0       	breq	.+8      	; 0x10da <modf+0x66>
    10d2:	20 83       	st	Z, r18
    10d4:	31 83       	std	Z+1, r19	; 0x01
    10d6:	42 83       	std	Z+2, r20	; 0x02
    10d8:	53 83       	std	Z+3, r21	; 0x03
    10da:	08 95       	ret

000010dc <__divsf3>:
    10dc:	0e 94 82 08 	call	0x1104	; 0x1104 <__divsf3x>
    10e0:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_round>
    10e4:	0e 94 44 06 	call	0xc88	; 0xc88 <__fp_pscB>
    10e8:	58 f0       	brcs	.+22     	; 0x1100 <__divsf3+0x24>
    10ea:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__fp_pscA>
    10ee:	40 f0       	brcs	.+16     	; 0x1100 <__divsf3+0x24>
    10f0:	29 f4       	brne	.+10     	; 0x10fc <__divsf3+0x20>
    10f2:	5f 3f       	cpi	r21, 0xFF	; 255
    10f4:	29 f0       	breq	.+10     	; 0x1100 <__divsf3+0x24>
    10f6:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>
    10fa:	51 11       	cpse	r21, r1
    10fc:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_szero>
    1100:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__fp_nan>

00001104 <__divsf3x>:
    1104:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__fp_split3>
    1108:	68 f3       	brcs	.-38     	; 0x10e4 <__divsf3+0x8>

0000110a <__divsf3_pse>:
    110a:	99 23       	and	r25, r25
    110c:	b1 f3       	breq	.-20     	; 0x10fa <__divsf3+0x1e>
    110e:	55 23       	and	r21, r21
    1110:	91 f3       	breq	.-28     	; 0x10f6 <__divsf3+0x1a>
    1112:	95 1b       	sub	r25, r21
    1114:	55 0b       	sbc	r21, r21
    1116:	bb 27       	eor	r27, r27
    1118:	aa 27       	eor	r26, r26
    111a:	62 17       	cp	r22, r18
    111c:	73 07       	cpc	r23, r19
    111e:	84 07       	cpc	r24, r20
    1120:	38 f0       	brcs	.+14     	; 0x1130 <__divsf3_pse+0x26>
    1122:	9f 5f       	subi	r25, 0xFF	; 255
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	22 0f       	add	r18, r18
    1128:	33 1f       	adc	r19, r19
    112a:	44 1f       	adc	r20, r20
    112c:	aa 1f       	adc	r26, r26
    112e:	a9 f3       	breq	.-22     	; 0x111a <__divsf3_pse+0x10>
    1130:	35 d0       	rcall	.+106    	; 0x119c <__divsf3_pse+0x92>
    1132:	0e 2e       	mov	r0, r30
    1134:	3a f0       	brmi	.+14     	; 0x1144 <__divsf3_pse+0x3a>
    1136:	e0 e8       	ldi	r30, 0x80	; 128
    1138:	32 d0       	rcall	.+100    	; 0x119e <__divsf3_pse+0x94>
    113a:	91 50       	subi	r25, 0x01	; 1
    113c:	50 40       	sbci	r21, 0x00	; 0
    113e:	e6 95       	lsr	r30
    1140:	00 1c       	adc	r0, r0
    1142:	ca f7       	brpl	.-14     	; 0x1136 <__divsf3_pse+0x2c>
    1144:	2b d0       	rcall	.+86     	; 0x119c <__divsf3_pse+0x92>
    1146:	fe 2f       	mov	r31, r30
    1148:	29 d0       	rcall	.+82     	; 0x119c <__divsf3_pse+0x92>
    114a:	66 0f       	add	r22, r22
    114c:	77 1f       	adc	r23, r23
    114e:	88 1f       	adc	r24, r24
    1150:	bb 1f       	adc	r27, r27
    1152:	26 17       	cp	r18, r22
    1154:	37 07       	cpc	r19, r23
    1156:	48 07       	cpc	r20, r24
    1158:	ab 07       	cpc	r26, r27
    115a:	b0 e8       	ldi	r27, 0x80	; 128
    115c:	09 f0       	breq	.+2      	; 0x1160 <__divsf3_pse+0x56>
    115e:	bb 0b       	sbc	r27, r27
    1160:	80 2d       	mov	r24, r0
    1162:	bf 01       	movw	r22, r30
    1164:	ff 27       	eor	r31, r31
    1166:	93 58       	subi	r25, 0x83	; 131
    1168:	5f 4f       	sbci	r21, 0xFF	; 255
    116a:	3a f0       	brmi	.+14     	; 0x117a <__divsf3_pse+0x70>
    116c:	9e 3f       	cpi	r25, 0xFE	; 254
    116e:	51 05       	cpc	r21, r1
    1170:	78 f0       	brcs	.+30     	; 0x1190 <__divsf3_pse+0x86>
    1172:	0c 94 34 06 	jmp	0xc68	; 0xc68 <__fp_inf>
    1176:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__fp_szero>
    117a:	5f 3f       	cpi	r21, 0xFF	; 255
    117c:	e4 f3       	brlt	.-8      	; 0x1176 <__divsf3_pse+0x6c>
    117e:	98 3e       	cpi	r25, 0xE8	; 232
    1180:	d4 f3       	brlt	.-12     	; 0x1176 <__divsf3_pse+0x6c>
    1182:	86 95       	lsr	r24
    1184:	77 95       	ror	r23
    1186:	67 95       	ror	r22
    1188:	b7 95       	ror	r27
    118a:	f7 95       	ror	r31
    118c:	9f 5f       	subi	r25, 0xFF	; 255
    118e:	c9 f7       	brne	.-14     	; 0x1182 <__divsf3_pse+0x78>
    1190:	88 0f       	add	r24, r24
    1192:	91 1d       	adc	r25, r1
    1194:	96 95       	lsr	r25
    1196:	87 95       	ror	r24
    1198:	97 f9       	bld	r25, 7
    119a:	08 95       	ret
    119c:	e1 e0       	ldi	r30, 0x01	; 1
    119e:	66 0f       	add	r22, r22
    11a0:	77 1f       	adc	r23, r23
    11a2:	88 1f       	adc	r24, r24
    11a4:	bb 1f       	adc	r27, r27
    11a6:	62 17       	cp	r22, r18
    11a8:	73 07       	cpc	r23, r19
    11aa:	84 07       	cpc	r24, r20
    11ac:	ba 07       	cpc	r27, r26
    11ae:	20 f0       	brcs	.+8      	; 0x11b8 <__divsf3_pse+0xae>
    11b0:	62 1b       	sub	r22, r18
    11b2:	73 0b       	sbc	r23, r19
    11b4:	84 0b       	sbc	r24, r20
    11b6:	ba 0b       	sbc	r27, r26
    11b8:	ee 1f       	adc	r30, r30
    11ba:	88 f7       	brcc	.-30     	; 0x119e <__divsf3_pse+0x94>
    11bc:	e0 95       	com	r30
    11be:	08 95       	ret

000011c0 <__fp_mpack>:
    11c0:	9f 3f       	cpi	r25, 0xFF	; 255
    11c2:	31 f0       	breq	.+12     	; 0x11d0 <__fp_mpack_finite+0xc>

000011c4 <__fp_mpack_finite>:
    11c4:	91 50       	subi	r25, 0x01	; 1
    11c6:	20 f4       	brcc	.+8      	; 0x11d0 <__fp_mpack_finite+0xc>
    11c8:	87 95       	ror	r24
    11ca:	77 95       	ror	r23
    11cc:	67 95       	ror	r22
    11ce:	b7 95       	ror	r27
    11d0:	88 0f       	add	r24, r24
    11d2:	91 1d       	adc	r25, r1
    11d4:	96 95       	lsr	r25
    11d6:	87 95       	ror	r24
    11d8:	97 f9       	bld	r25, 7
    11da:	08 95       	ret

000011dc <_exit>:
    11dc:	f8 94       	cli

000011de <__stop_program>:
    11de:	ff cf       	rjmp	.-2      	; 0x11de <__stop_program>
